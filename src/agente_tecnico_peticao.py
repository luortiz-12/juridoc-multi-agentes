# agente_peticao.py
import os
import json
from typing import Dict, Any, List
from langchain_openai import ChatOpenAI
from langchain_core.prompts import PromptTemplate
from langchain.chains import LLMChain
from pesquisa_juridica import PesquisaJuridica

class AgentePeticao:
    """
    Agente simplificado especializado em gerar peti√ß√µes iniciais.
    Integra pesquisa jur√≠dica via DuckDuckGo para fundamenta√ß√£o legal.
    """
    
    def __init__(self, openai_api_key: str):
        self.llm = ChatOpenAI(
            model="gpt-4o", 
            openai_api_key=openai_api_key, 
            temperature=0.2
        )
        
        # Inicializar m√≥dulo de pesquisa jur√≠dica
        self.pesquisa = PesquisaJuridica()
        
        # Template para an√°lise e estrutura√ß√£o dos dados
        self.prompt_analise = PromptTemplate(
            input_variables=["dados_entrada"],
            template="""
            Voc√™ √© um advogado especialista em peti√ß√µes iniciais. Analise os dados fornecidos e extraia as informa√ß√µes essenciais para estruturar uma peti√ß√£o.

            DADOS RECEBIDOS:
            {dados_entrada}

            TAREFA: Extraia e organize as seguintes informa√ß√µes:
            1. Tipo de a√ß√£o/procedimento
            2. Partes envolvidas (autor/requerente e r√©u/requerido)
            3. Fatos principais do caso
            4. Fundamentos jur√≠dicos necess√°rios
            5. Pedidos espec√≠ficos
            6. Valor da causa (se aplic√°vel)
            7. Compet√™ncia/foro

            FORMATO DE RESPOSTA: JSON com as chaves:
            - "tipo_acao": string
            - "autor": dict com nome, cpf/cnpj, endere√ßo, etc.
            - "reu": dict com nome, cpf/cnpj, endere√ßo, etc.
            - "fatos": string descritiva
            - "fundamentos_necessarios": lista de temas jur√≠dicos para pesquisar
            - "pedidos": lista de pedidos espec√≠ficos
            - "valor_causa": string
            - "competencia": string
            - "observacoes": string com informa√ß√µes adicionais
            """
        )
        
        # Template para reda√ß√£o da peti√ß√£o
        self.prompt_peticao = PromptTemplate(
            input_variables=["dados_estruturados", "pesquisa_juridica"],
            template="""
            Voc√™ √© um advogado processualista s√™nior especializado em peti√ß√µes iniciais.

            DADOS ESTRUTURADOS DO CASO:
            {dados_estruturados}

            FUNDAMENTA√á√ÉO JUR√çDICA PESQUISADA:
            {pesquisa_juridica}

            TAREFA: Redija uma peti√ß√£o inicial completa em HTML, seguindo a estrutura formal brasileira.

            ESTRUTURA OBRIGAT√ìRIA:
            1. Endere√ßamento ao ju√≠zo
            2. Qualifica√ß√£o das partes
            3. T√≠tulo da a√ß√£o
            4. DOS FATOS
            5. DO DIREITO (com fundamenta√ß√£o legal pesquisada)
            6. DOS PEDIDOS
            7. Valor da causa
            8. Local, data e assinatura

            REGRAS IMPORTANTES:
            - Use HTML sem√¢ntico com tags <h1>, <h2>, <p>, <strong>, etc.
            - Para informa√ß√µes n√£o fornecidas, use placeholders claros: [NOME DO ADVOGADO], [OAB/UF], [ENDERE√áO], etc.
            - Cite as leis, jurisprud√™ncias e doutrinas encontradas na pesquisa
            - Mantenha linguagem t√©cnica e formal
            - Inclua fundamenta√ß√£o s√≥lida baseada na pesquisa realizada
            - Estruture os pedidos de forma clara e objetiva

            FORMATO: HTML puro, come√ßando com <h1> e sem tags <html>, <head> ou <body>.
            """
        )
        
        self.chain_analise = LLMChain(llm=self.llm, prompt=self.prompt_analise)
        self.chain_peticao = LLMChain(llm=self.llm, prompt=self.prompt_peticao)
    
    def gerar_peticao(self, dados_entrada: Dict[str, Any]) -> Dict[str, Any]:
        """
        M√©todo principal para gerar uma peti√ß√£o inicial.
        
        Args:
            dados_entrada: Dados recebidos do n8n ou outro sistema
            
        Returns:
            Dict com status e documento HTML gerado
        """
        try:
            print("üöÄ Iniciando gera√ß√£o de peti√ß√£o...")
            
            # Etapa 1: Analisar e estruturar dados
            print("üìä Etapa 1: Analisando dados de entrada...")
            dados_estruturados = self._analisar_dados(dados_entrada)
            
            # Etapa 2: Realizar pesquisa jur√≠dica
            print("üîç Etapa 2: Realizando pesquisa jur√≠dica...")
            pesquisa_juridica = self._realizar_pesquisa_juridica(dados_estruturados)
            
            # Etapa 3: Redigir peti√ß√£o
            print("‚úçÔ∏è Etapa 3: Redigindo peti√ß√£o...")
            peticao_html = self._redigir_peticao(dados_estruturados, pesquisa_juridica)
            
            # Etapa 4: Validar e formatar resultado
            print("‚úÖ Etapa 4: Finalizando...")
            resultado = {
                "status": "sucesso",
                "documento_html": peticao_html,
                "dados_estruturados": dados_estruturados,
                "pesquisa_realizada": pesquisa_juridica.get("resumo_pesquisa", ""),
                "timestamp": self._get_timestamp()
            }
            
            print("üéâ Peti√ß√£o gerada com sucesso!")
            return resultado
            
        except Exception as e:
            print(f"‚ùå Erro na gera√ß√£o da peti√ß√£o: {e}")
            traceback.print_exc()
            return {
                "status": "erro",
                "mensagem": f"Erro na gera√ß√£o da peti√ß√£o: {str(e)}",
                "detalhes": traceback.format_exc()
            }
    
    def _analisar_dados(self, dados_entrada: Dict[str, Any]) -> Dict[str, Any]:
        """Analisa e estrutura os dados de entrada."""
        try:
            dados_formatados = json.dumps(dados_entrada, indent=2, ensure_ascii=False)
            resposta = self.chain_analise.run(dados_entrada=dados_formatados)
            
            # Tentar parsear como JSON
            try:
                dados_estruturados = json.loads(resposta)
            except json.JSONDecodeError:
                # Se n√£o conseguir parsear, criar estrutura b√°sica
                dados_estruturados = {
                    "tipo_acao": dados_entrada.get("tipo_acao", "A√ß√£o n√£o especificada"),
                    "autor": dados_entrada.get("autor", {}),
                    "reu": dados_entrada.get("reu", {}),
                    "fatos": dados_entrada.get("fatos", "Fatos n√£o especificados"),
                    "fundamentos_necessarios": ["direito civil", "c√≥digo de processo civil"],
                    "pedidos": dados_entrada.get("pedidos", ["Pedido n√£o especificado"]),
                    "valor_causa": dados_entrada.get("valor_causa", "A ser arbitrado"),
                    "competencia": dados_entrada.get("competencia", "Foro competente"),
                    "observacoes": resposta
                }
            
            return dados_estruturados
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erro na an√°lise de dados: {e}")
            # Retornar estrutura m√≠nima em caso de erro
            return {
                "tipo_acao": dados_entrada.get("tipo_acao", "A√ß√£o n√£o especificada"),
                "autor": dados_entrada.get("autor", {}),
                "reu": dados_entrada.get("reu", {}),
                "fatos": dados_entrada.get("fatos", "Fatos n√£o especificados"),
                "fundamentos_necessarios": ["direito civil"],
                "pedidos": dados_entrada.get("pedidos", ["Pedido n√£o especificado"]),
                "valor_causa": dados_entrada.get("valor_causa", "A ser arbitrado"),
                "competencia": dados_entrada.get("competencia", "Foro competente"),
                "observacoes": f"Erro na an√°lise: {str(e)}"
            }
    
    def _realizar_pesquisa_juridica(self, dados_estruturados: Dict[str, Any]) -> Dict[str, Any]:
        """Realiza pesquisa jur√≠dica baseada nos fundamentos necess√°rios."""
        try:
            fundamentos = dados_estruturados.get("fundamentos_necessarios", [])
            tipo_acao = dados_estruturados.get("tipo_acao", "")
            
            # Realizar pesquisas espec√≠ficas
            resultados_pesquisa = self.pesquisa.pesquisar_fundamentos_juridicos(
                fundamentos=fundamentos,
                tipo_acao=tipo_acao
            )
            
            return resultados_pesquisa
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erro na pesquisa jur√≠dica: {e}")
            return {
                "leis": "Pesquisa jur√≠dica n√£o dispon√≠vel devido a erro t√©cnico.",
                "jurisprudencia": "Consulte jurisprud√™ncia espec√≠fica para o caso.",
                "doutrina": "Consulte doutrina especializada.",
                "resumo_pesquisa": f"Erro na pesquisa: {str(e)}"
            }
    
    def _redigir_peticao(self, dados_estruturados: Dict[str, Any], pesquisa_juridica: Dict[str, Any]) -> str:
        """Redige a peti√ß√£o inicial em HTML."""
        try:
            dados_formatados = json.dumps(dados_estruturados, indent=2, ensure_ascii=False)
            pesquisa_formatada = json.dumps(pesquisa_juridica, indent=2, ensure_ascii=False)
            
            peticao_html = self.chain_peticao.run(
                dados_estruturados=dados_formatados,
                pesquisa_juridica=pesquisa_formatada
            )
            
            return peticao_html
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erro na reda√ß√£o: {e}")
            return f"""
            <h1>PETI√á√ÉO INICIAL</h1>
            <p><strong>ERRO NA GERA√á√ÉO:</strong> {str(e)}</p>
            <p>Por favor, tente novamente ou entre em contato com o suporte t√©cnico.</p>
            """
    
    def _get_timestamp(self) -> str:
        """Retorna timestamp atual."""
        from datetime import datetime
        return datetime.now().strftime("%Y-%m-%d %H:%M:%S")

