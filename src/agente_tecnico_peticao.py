# agente_tecnico_peticao.py - VERS√ÉO FINAL (O ESTRATEGISTA)

import json
from langchain_openai import ChatOpenAI
from langchain_core.prompts import PromptTemplate
from langchain.chains import LLMChain
# Importa a classe de pesquisa do seu outro arquivo
from pesquisa_juridica import PesquisaJuridica
# --- CORRE√á√ÉO AQUI ---
# Importamos 'List' e 'Dict' para usar nas anota√ß√µes de tipo das fun√ß√µes.
from typing import List, Dict

class AgenteTecnicoPeticao:
    """
    Agente especialista que analisa fatos, realiza pesquisa jur√≠dica online
    e estrutura a tese e os fundamentos para uma peti√ß√£o.
    """
    def __init__(self, llm_api_key: str):
        self.llm = ChatOpenAI(model="gpt-4o", openai_api_key=llm_api_key, temperature=0.1)
        self.pesquisa = PesquisaJuridica()
        self.prompt_template = PromptTemplate(
            input_variables=["dados_processados", "pesquisa_juridica"],
            template="""
            Voc√™ √© um advogado pesquisador s√™nior. Sua miss√£o √© analisar os fatos de um caso, junto com os resultados de uma pesquisa jur√≠dica online, e construir a tese jur√≠dica mais forte para uma peti√ß√£o.

            DADOS DO CASO:
            {dados_processados}

            PESQUISA ONLINE REALIZADA:
            {pesquisa_juridica}

            SUA TAREFA:
            Com base em TUDO, estruture uma an√°lise jur√≠dica detalhada em formato JSON. Seja preciso e t√©cnico. Identifique o ramo do direito (C√≠vel, Trabalhista, etc.), os artigos de lei e a jurisprud√™ncia mais relevante encontrada.

            FORMATO DE RESPOSTA (JSON V√ÅLIDO):
            {{
                "tipo_acao": "Ex: Reclama√ß√£o Trabalhista com Pedido de Indeniza√ß√£o por Danos Morais",
                "fundamentos_legais": [{{"lei": "CLT", "artigos": "Art. 483, 'd'", "descricao": "Rescis√£o indireta por descumprimento de obriga√ß√µes contratuais."}}],
                "principios_juridicos": ["Princ√≠pio da Prote√ß√£o ao Trabalhador"],
                "jurisprudencia_relevante": "Cite as decis√µes mais importantes encontradas na pesquisa sobre horas extras e ass√©dio moral.",
                "analise_juridica_detalhada": "Par√°grafo explicando como os fatos (horas extras n√£o pagas, ass√©dio) se conectam com a CLT e a jurisprud√™ncia para justificar a rescis√£o indireta e o dano moral."
            }}
            """
        )
        self.chain = LLMChain(llm=self.llm, prompt=self.prompt_template)

    def analisar_dados(self, dados_processados: dict) -> dict:
        """
        Executa o processo completo de an√°lise e pesquisa.
        """
        try:
            print("üß† Etapa T√©cnica: Analisando e pesquisando...")
            
            temas_para_pesquisa = self._extrair_temas(dados_processados)
            
            pesquisa_juridica = self.pesquisa.pesquisar_fundamentos_juridicos(
                fundamentos=temas_para_pesquisa,
                tipo_acao=dados_processados.get("tipo_acao", "peti√ß√£o")
            )
            
            dados_formatados = json.dumps(dados_processados, indent=2, ensure_ascii=False)
            pesquisa_formatada = json.dumps(pesquisa_juridica, indent=2, ensure_ascii=False)
            
            resposta_llm = self.chain.invoke({
                "dados_processados": dados_formatados,
                "pesquisa_juridica": pesquisa_formatada
            })
            
            texto_gerado = resposta_llm['text']
            texto_limpo = texto_gerado.strip()
            if '```json' in texto_limpo: texto_limpo = texto_limpo.split('```json', 1)[-1]
            if '```' in texto_limpo: texto_limpo = texto_limpo.split('```', 1)[0]
            
            analise_final = json.loads(texto_limpo.strip())
            return analise_final

        except Exception as e:
            print(f"‚ùå Erro no Agente T√©cnico de Peti√ß√£o: {e}")
            return {"erro": "Falha na an√°lise t√©cnica da peti√ß√£o", "detalhes": str(e)}

    def _extrair_temas(self, dados_processados: dict) -> List[str]:
        fatos = dados_processados.get("fatos_peticao", "")
        pedido = dados_processados.get("pedido_peticao", "")
        texto_completo = (fatos + " " + pedido).lower()
        
        temas = set()
        if "hora extra" in texto_completo: temas.add("horas extras")
        if "ass√©dio moral" in texto_completo: temas.add("ass√©dio moral no trabalho")
        if "rescis√£o indireta" in texto_completo: temas.add("rescis√£o indireta do contrato de trabalho")
        
        return list(temas) if temas else ["direito geral"]