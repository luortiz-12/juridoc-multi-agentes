# agente_coletor_dados.py - Agente Coletor de Dados Simplificado

import json
import re
from typing import Dict, Any, List, Optional
from langchain_openai import ChatOpenAI
from langchain_core.prompts import PromptTemplate
from langchain.chains import LLMChain

class AgenteColetorDados:
    """
    Agente respons√°vel por coletar, validar e estruturar os dados de entrada
    para gera√ß√£o de peti√ß√µes iniciais.
    """
    
    def __init__(self, openai_api_key: str):
        self.llm = ChatOpenAI(
            model="gpt-4o", 
            openai_api_key=openai_api_key, 
            temperature=0.1
        )
        
        # Template para an√°lise e estrutura√ß√£o dos dados
        self.prompt_estruturacao = PromptTemplate(
            input_variables=["dados_brutos"],
            template="""
            Voc√™ √© um assistente jur√≠dico especializado em organizar dados para peti√ß√µes iniciais.
            
            DADOS RECEBIDOS:
            {dados_brutos}
            
            TAREFA: Analise os dados e organize-os em uma estrutura padronizada para peti√ß√£o inicial.
            
            ESTRUTURA ESPERADA (retorne em JSON v√°lido):
            {{
                "tipo_acao": "string - tipo da a√ß√£o jur√≠dica",
                "competencia": "string - vara/foro competente",
                "valor_causa": "string - valor da causa",
                "autor": {{
                    "nome": "string",
                    "tipo_pessoa": "fisica|juridica",
                    "cpf_cnpj": "string",
                    "endereco": "string",
                    "telefone": "string",
                    "email": "string",
                    "profissao": "string (se pessoa f√≠sica)",
                    "estado_civil": "string (se pessoa f√≠sica)"
                }},
                "reu": {{
                    "nome": "string",
                    "tipo_pessoa": "fisica|juridica", 
                    "cpf_cnpj": "string",
                    "endereco": "string",
                    "telefone": "string",
                    "email": "string"
                }},
                "fatos": {{
                    "resumo": "string - resumo dos fatos principais",
                    "cronologia": ["lista de eventos em ordem cronol√≥gica"],
                    "documentos": ["lista de documentos mencionados"],
                    "valores": ["lista de valores envolvidos"]
                }},
                "fundamentos_juridicos": {{
                    "areas_direito": ["lista de √°reas do direito aplic√°veis"],
                    "leis_aplicaveis": ["lista de leis que podem ser aplic√°veis"],
                    "temas_pesquisa": ["lista de temas para pesquisa jur√≠dica"]
                }},
                "pedidos": {{
                    "principais": ["lista de pedidos principais"],
                    "alternativos": ["lista de pedidos alternativos"],
                    "cautelares": ["lista de pedidos cautelares se houver"]
                }},
                "urgencia": "boolean - se h√° urg√™ncia no caso",
                "observacoes": "string - observa√ß√µes adicionais importantes"
            }}
            
            REGRAS:
            1. Se alguma informa√ß√£o n√£o estiver dispon√≠vel, use null ou string vazia
            2. Seja preciso na classifica√ß√£o do tipo de a√ß√£o
            3. Identifique corretamente se as partes s√£o pessoas f√≠sicas ou jur√≠dicas
            4. Extraia todos os fatos relevantes de forma organizada
            5. Sugira √°reas do direito e leis aplic√°veis baseado nos fatos
            6. Organize os pedidos por ordem de import√¢ncia
            
            RESPOSTA: Apenas o JSON estruturado, sem texto adicional.
            """
        )
        
        self.chain_estruturacao = LLMChain(llm=self.llm, prompt=self.prompt_estruturacao)
    
    def coletar_e_processar(self, dados_brutos: Dict[str, Any]) -> Dict[str, Any]:
        """
        M√©todo principal para coletar e processar dados de entrada.
        
        Args:
            dados_brutos: Dados recebidos do n8n ou outro sistema
            
        Returns:
            Dict com dados estruturados e validados
        """
        try:
            print("üìä Iniciando coleta e processamento de dados...")
            
            # Etapa 1: Valida√ß√£o b√°sica
            dados_validados = self._validar_dados_basicos(dados_brutos)
            
            # Etapa 2: Estrutura√ß√£o via LLM
            dados_estruturados = self._estruturar_dados_llm(dados_validados)
            
            # Etapa 3: Valida√ß√£o final e enriquecimento
            dados_finais = self._validar_e_enriquecer(dados_estruturados)
            
            print("‚úÖ Dados coletados e processados com sucesso")
            return {
                "status": "sucesso",
                "dados_estruturados": dados_finais,
                "dados_originais": dados_brutos
            }
            
        except Exception as e:
            print(f"‚ùå Erro na coleta de dados: {e}")
            return {
                "status": "erro",
                "mensagem": f"Erro no processamento dos dados: {str(e)}",
                "dados_originais": dados_brutos
            }
    
    def _validar_dados_basicos(self, dados: Dict[str, Any]) -> Dict[str, Any]:
        """Valida√ß√£o b√°sica dos dados de entrada."""
        dados_validados = dados.copy()
        
        # Garantir campos m√≠nimos
        campos_obrigatorios = ['tipo_acao', 'autor', 'reu', 'fatos']
        for campo in campos_obrigatorios:
            if campo not in dados_validados or not dados_validados[campo]:
                if campo == 'tipo_acao':
                    dados_validados[campo] = "A√ß√£o n√£o especificada"
                elif campo in ['autor', 'reu']:
                    dados_validados[campo] = {"nome": "N√£o informado"}
                elif campo == 'fatos':
                    dados_validados[campo] = "Fatos n√£o especificados"
        
        # Normalizar estruturas de autor e r√©u
        for parte in ['autor', 'reu']:
            if isinstance(dados_validados.get(parte), str):
                dados_validados[parte] = {"nome": dados_validados[parte]}
            elif not isinstance(dados_validados.get(parte), dict):
                dados_validados[parte] = {"nome": "N√£o informado"}
        
        return dados_validados
    
    def _estruturar_dados_llm(self, dados: Dict[str, Any]) -> Dict[str, Any]:
        """Estrutura os dados usando LLM."""
        try:
            dados_formatados = json.dumps(dados, indent=2, ensure_ascii=False)
            resposta = self.chain_estruturacao.run(dados_brutos=dados_formatados)
            
            # Tentar parsear como JSON
            try:
                dados_estruturados = json.loads(resposta)
                return dados_estruturados
            except json.JSONDecodeError:
                print("‚ö†Ô∏è Resposta do LLM n√£o √© JSON v√°lido, usando estrutura b√°sica")
                return self._criar_estrutura_basica(dados)
                
        except Exception as e:
            print(f"‚ö†Ô∏è Erro na estrutura√ß√£o via LLM: {e}")
            return self._criar_estrutura_basica(dados)
    
    def _criar_estrutura_basica(self, dados: Dict[str, Any]) -> Dict[str, Any]:
        """Cria estrutura b√°sica quando o LLM falha."""
        return {
            "tipo_acao": dados.get("tipo_acao", "A√ß√£o n√£o especificada"),
            "competencia": dados.get("competencia", "Foro competente"),
            "valor_causa": dados.get("valor_causa", "A ser arbitrado"),
            "autor": self._estruturar_parte(dados.get("autor", {})),
            "reu": self._estruturar_parte(dados.get("reu", {})),
            "fatos": {
                "resumo": dados.get("fatos", "Fatos n√£o especificados"),
                "cronologia": dados.get("cronologia", []),
                "documentos": dados.get("documentos", []),
                "valores": dados.get("valores", [])
            },
            "fundamentos_juridicos": {
                "areas_direito": self._extrair_areas_direito(dados),
                "leis_aplicaveis": dados.get("leis_aplicaveis", []),
                "temas_pesquisa": self._extrair_temas_pesquisa(dados)
            },
            "pedidos": {
                "principais": dados.get("pedidos", ["Pedido n√£o especificado"]) if isinstance(dados.get("pedidos"), list) else [dados.get("pedidos", "Pedido n√£o especificado")],
                "alternativos": dados.get("pedidos_alternativos", []),
                "cautelares": dados.get("pedidos_cautelares", [])
            },
            "urgencia": dados.get("urgencia", False),
            "observacoes": dados.get("observacoes", "")
        }
    
    def _estruturar_parte(self, parte_dados: Dict[str, Any]) -> Dict[str, Any]:
        """Estrutura dados de uma parte (autor ou r√©u)."""
        if isinstance(parte_dados, str):
            parte_dados = {"nome": parte_dados}
        
        return {
            "nome": parte_dados.get("nome", "N√£o informado"),
            "tipo_pessoa": self._detectar_tipo_pessoa(parte_dados),
            "cpf_cnpj": parte_dados.get("cpf", parte_dados.get("cnpj", parte_dados.get("cpf_cnpj", ""))),
            "endereco": parte_dados.get("endereco", ""),
            "telefone": parte_dados.get("telefone", ""),
            "email": parte_dados.get("email", ""),
            "profissao": parte_dados.get("profissao", "") if self._detectar_tipo_pessoa(parte_dados) == "fisica" else "",
            "estado_civil": parte_dados.get("estado_civil", "") if self._detectar_tipo_pessoa(parte_dados) == "fisica" else ""
        }
    
    def _detectar_tipo_pessoa(self, dados: Dict[str, Any]) -> str:
        """Detecta se √© pessoa f√≠sica ou jur√≠dica."""
        # Verificar se tem CNPJ
        cnpj = dados.get("cnpj", "")
        if cnpj and (len(cnpj.replace(".", "").replace("/", "").replace("-", "")) == 14):
            return "juridica"
        
        # Verificar se tem CPF
        cpf = dados.get("cpf", "")
        if cpf and (len(cpf.replace(".", "").replace("-", "")) == 11):
            return "fisica"
        
        # Verificar campo tipo_pessoa expl√≠cito
        tipo = dados.get("tipo_pessoa", "").lower()
        if tipo in ["juridica", "pj", "empresa"]:
            return "juridica"
        elif tipo in ["fisica", "pf", "pessoa"]:
            return "fisica"
        
        # Verificar por palavras-chave no nome
        nome = dados.get("nome", "").lower()
        palavras_pj = ["ltda", "s.a.", "s/a", "eireli", "mei", "empresa", "comercio", "industria"]
        if any(palavra in nome for palavra in palavras_pj):
            return "juridica"
        
        # Default para pessoa f√≠sica
        return "fisica"
    
    def _extrair_areas_direito(self, dados: Dict[str, Any]) -> List[str]:
        """Extrai √°reas do direito baseado no tipo de a√ß√£o e fatos."""
        areas = []
        
        tipo_acao = dados.get("tipo_acao", "").lower()
        fatos = str(dados.get("fatos", "")).lower()
        
        # Mapeamento de palavras-chave para √°reas do direito
        mapeamento = {
            "direito civil": ["civil", "contrato", "responsabilidade", "danos", "indeniza√ß√£o"],
            "direito do consumidor": ["consumidor", "produto", "servi√ßo", "fornecedor", "cdc"],
            "direito trabalhista": ["trabalho", "trabalhista", "emprego", "sal√°rio", "rescis√£o"],
            "direito tribut√°rio": ["tributo", "imposto", "taxa", "contribui√ß√£o", "fiscal"],
            "direito administrativo": ["administrativo", "servidor", "p√∫blico", "licita√ß√£o"],
            "direito penal": ["penal", "crime", "delito", "contraven√ß√£o"],
            "direito comercial": ["comercial", "empresarial", "sociedade", "fal√™ncia"],
            "direito de fam√≠lia": ["fam√≠lia", "div√≥rcio", "alimentos", "guarda", "uni√£o"]
        }
        
        texto_completo = f"{tipo_acao} {fatos}".lower()
        
        for area, palavras_chave in mapeamento.items():
            if any(palavra in texto_completo for palavra in palavras_chave):
                areas.append(area)
        
        # Se n√£o encontrou nenhuma √°rea, adicionar direito civil como padr√£o
        if not areas:
            areas.append("direito civil")
        
        return areas
    
    def _extrair_temas_pesquisa(self, dados: Dict[str, Any]) -> List[str]:
        """Extrai temas espec√≠ficos para pesquisa jur√≠dica."""
        temas = []
        
        tipo_acao = dados.get("tipo_acao", "")
        areas = self._extrair_areas_direito(dados)
        
        # Adicionar tipo de a√ß√£o como tema
        if tipo_acao:
            temas.append(tipo_acao.lower())
        
        # Adicionar √°reas do direito
        temas.extend(areas)
        
        # Adicionar temas espec√≠ficos baseados no conte√∫do
        fatos = str(dados.get("fatos", "")).lower()
        
        temas_especificos = {
            "danos morais": ["dano moral", "danos morais", "constrangimento", "humilha√ß√£o"],
            "juros e corre√ß√£o": ["juros", "corre√ß√£o monet√°ria", "atualiza√ß√£o"],
            "tutela antecipada": ["urg√™ncia", "tutela", "liminar", "antecipa√ß√£o"],
            "honor√°rios advocat√≠cios": ["honor√°rios", "advocat√≠cios", "sucumb√™ncia"],
            "c√≥digo de processo civil": ["processo", "procedimento", "cpc"],
            "c√≥digo civil": ["civil", "obriga√ß√£o", "contrato"]
        }
        
        for tema, palavras in temas_especificos.items():
            if any(palavra in fatos for palavra in palavras):
                temas.append(tema)
        
        return list(set(temas))  # Remover duplicatas
    
    def _validar_e_enriquecer(self, dados: Dict[str, Any]) -> Dict[str, Any]:
        """Valida√ß√£o final e enriquecimento dos dados."""
        # Validar CPF/CNPJ
        for parte in ['autor', 'reu']:
            if parte in dados:
                cpf_cnpj = dados[parte].get('cpf_cnpj', '')
                if cpf_cnpj:
                    dados[parte]['cpf_cnpj'] = self._formatar_cpf_cnpj(cpf_cnpj)
        
        # Garantir que listas n√£o estejam vazias
        if not dados.get('fundamentos_juridicos', {}).get('temas_pesquisa'):
            dados['fundamentos_juridicos']['temas_pesquisa'] = ['direito civil', 'c√≥digo de processo civil']
        
        if not dados.get('pedidos', {}).get('principais'):
            dados['pedidos']['principais'] = ['Pedido n√£o especificado']
        
        return dados
    
    def _formatar_cpf_cnpj(self, documento: str) -> str:
        """Formata CPF ou CNPJ."""
        # Remove caracteres n√£o num√©ricos
        numeros = re.sub(r'\D', '', documento)
        
        if len(numeros) == 11:  # CPF
            return f"{numeros[:3]}.{numeros[3:6]}.{numeros[6:9]}-{numeros[9:]}"
        elif len(numeros) == 14:  # CNPJ
            return f"{numeros[:2]}.{numeros[2:5]}.{numeros[5:8]}/{numeros[8:12]}-{numeros[12:]}"
        else:
            return documento  # Retorna original se n√£o for CPF nem CNPJ v√°lido

