# agente_coletor_dados.py - Vers√£o 3.0 (Integra√ß√£o N8N)

import json
import re
from typing import Dict, Any, List

class AgenteColetorDados:
    """
    Agente Coletor de Dados v3.0 - Robusto para Integra√ß√£o N8N.
    - Mapeia corretamente os campos vari√°veis do formul√°rio do site.
    - Identifica o contexto jur√≠dico (Trabalhista, Civil, Criminal) com base nos campos preenchidos.
    - Consolida inteligentemente os fatos de m√∫ltiplos campos em uma √∫nica narrativa.
    - Extrai os fundamentos jur√≠dicos corretos a partir do contexto real dos fatos.
    - Estrutura os dados de forma limpa para os agentes subsequentes.
    """

    def __init__(self):
        print("üìä Inicializando Agente Coletor de Dados v3.0 (N8N)...")
        # N√£o h√° necessidade de inicializar LLM aqui, a l√≥gica ser√° baseada em regras e an√°lise de texto.
        print("‚úÖ Agente Coletor pronto para processar dados do N8N.")

    def coletar_e_processar(self, dados_brutos_n8n: Dict[str, Any]) -> Dict[str, Any]:
        """
        Ponto de entrada principal do agente. Recebe o JSON do N8N e retorna a estrutura de dados processada.
        """
        try:
            print("üìä Iniciando coleta e processamento de dados do N8N...")
            
            # ETAPA 1: Identificar o contexto e extrair os dados relevantes
            contexto, dados_relevantes = self._identificar_contexto_e_dados(dados_brutos_n8n)
            print(f"üîç Contexto jur√≠dico identificado: {contexto}")

            # ETAPA 2: Consolidar os fatos em uma √∫nica narrativa
            fatos_consolidados = self._consolidar_fatos(dados_relevantes)
            
            # ETAPA 3: Extrair os fundamentos jur√≠dicos com base nos fatos consolidados
            fundamentos = self._extrair_fundamentos_necessarios(fatos_consolidados, contexto)
            print(f"üîë Fundamentos extra√≠dos para pesquisa: {fundamentos}")

            # ETAPA 4: Montar a estrutura final e limpa
            dados_estruturados = self._montar_estrutura_final(dados_relevantes, fatos_consolidados, fundamentos, contexto)
            
            print("‚úÖ Dados coletados e estruturados com sucesso.")
            return {
                "status": "sucesso",
                "dados_estruturados": dados_estruturados
            }

        except Exception as e:
            print(f"‚ùå Erro cr√≠tico no Agente Coletor de Dados: {e}")
            traceback.print_exc()
            return {
                "status": "erro",
                "erro": f"Falha no processamento dos dados de entrada: {e}"
            }

    def _identificar_contexto_e_dados(self, dados_brutos: Dict[str, Any]) -> (str, Dict[str, Any]):
        """
        Analisa os campos preenchidos para determinar a √°rea do direito e extrair os dados brutos relevantes.
        """
        # COMENT√ÅRIO: Esta fun√ß√£o √© a nova intelig√™ncia central. Ela verifica quais campos espec√≠ficos de cada √°rea
        # foram preenchidos para decidir o tipo de a√ß√£o.
        
        dados_relevantes = {k: v for k, v in dados_brutos.items() if v is not None and str(v).strip() != ""}

        # Verifica√ß√£o priorit√°ria para casos trabalhistas
        campos_trabalhistas = ['datadmissaoTrabalhista', 'salarioTrabalhista', 'motivosaidaTrablhista', 'InfoExtraTrabalhista']
        if any(campo in dados_relevantes for campo in campos_trabalhistas):
            return "A√ß√£o Trabalhista", dados_relevantes

        # Adicionar outras l√≥gicas para Civil, Criminal, etc. aqui
        # Exemplo para Criminal:
        campos_criminais = ['datafatoCriminal', 'localfatoCriminal', 'NomeVitimaCriminal']
        if any(campo in dados_relevantes for campo in campos_criminais):
            return "Queixa-Crime", dados_relevantes

        # Fallback para C√≠vel
        return "A√ß√£o C√≠vel", dados_relevantes

    def _consolidar_fatos(self, dados: Dict[str, Any]) -> str:
        """
        Junta informa√ß√µes de m√∫ltiplos campos de texto para criar uma narrativa de fatos unificada.
        """
        # COMENT√ÅRIO: Esta fun√ß√£o resolve o problema de informa√ß√µes espalhadas.
        # Ela constr√≥i uma hist√≥ria completa para o Agente Redator.
        narrativa = []
        
        if dados.get("fatos"):
            narrativa.append(str(dados["fatos"]))
        
        # Consolida√ß√£o espec√≠fica para dados trabalhistas
        if dados.get("jornadaTrabalhista"):
            narrativa.append(f"A jornada de trabalho era a seguinte: {dados['jornadaTrabalhista']}.")
        if dados.get("motivosaidaTrablhista"):
            narrativa.append(f"O motivo da sa√≠da foi: {dados['motivosaidaTrablhista']}.")
        if dados.get("InfoExtraTrabalhista"):
            narrativa.append(f"Informa√ß√µes adicionais relevantes: {dados['InfoExtraTrabalhista']}.")
            
        # Adicionar outras consolida√ß√µes para Civil, Criminal, etc. aqui

        return " ".join(narrativa)

    def _extrair_fundamentos_necessarios(self, fatos: str, contexto: str) -> List[str]:
        """
        Extrai os termos jur√≠dicos chave dos fatos consolidados para guiar a pesquisa.
        Esta √© a corre√ß√£o para o bug da pesquisa gen√©rica.
        """
        # COMENT√ÅRIO: L√≥gica aprimorada para extrair os termos corretos.
        # Agora, a pesquisa ser√° muito mais precisa.
        fundamentos = set()
        texto_analise = fatos.lower()

        if contexto == "A√ß√£o Trabalhista":
            fundamentos.add("direito trabalhista")
            fundamentos.add("CLT")
            if "pejotiza√ß√£o" in texto_analise or "pessoa jur√≠dica" in texto_analise or "abrir uma empresa" in texto_analise:
                fundamentos.update(["reconhecimento de v√≠nculo empregat√≠cio", "pejotiza√ß√£o fraude trabalhista", "artigo 3¬∫ da CLT requisitos", "princ√≠pio da primazia da realidade", "subordina√ß√£o jur√≠dica"])
            if "horas extras" in texto_analise:
                fundamentos.update(["horas extras", "CLT art. 59"])
            if "ass√©dio moral" in texto_analise or "humilhante" in texto_analise:
                fundamentos.update(["ass√©dio moral", "danos morais"])
            if "estabilidade" in texto_analise or "doen√ßa ocupacional" in texto_analise:
                fundamentos.update(["doen√ßa ocupacional", "estabilidade acident√°ria", "Lei 8.213/91 art. 118", "danos morais acident√°rios"])
            if not fundamentos: # Fallback
                fundamentos.add("verbas rescis√≥rias")
        
        # Adicionar l√≥gicas para outras √°reas aqui
        
        return list(fundamentos) if fundamentos else ["direito civil", "c√≥digo civil"]

    def _montar_estrutura_final(self, dados: Dict[str, Any], fatos_consolidados: str, fundamentos: List[str], contexto: str) -> Dict[str, Any]:
        """
        Monta o dicion√°rio final com os dados limpos e estruturados.
        """
        # COMENT√ÅRIO: Mapeamento dos novos nomes de campos do N8N para a estrutura interna padronizada.
        autor = {
            "nome": dados.get("clienteNome", "[NOME DO AUTOR]"),
            "qualificacao": dados.get("qualificacaoCliente", "[QUALIFICA√á√ÉO DO AUTOR]")
        }
        reu = {
            "nome": dados.get("nomedaParte", "[NOME DO R√âU]"),
            "qualificacao": dados.get("Qualifica√ß√£o", "[QUALIFICA√á√ÉO DO R√âU]")
        }
        
        estrutura_final = {
            "autor": autor,
            "reu": reu,
            "tipo_acao": contexto,
            "fatos": fatos_consolidados,
            "pedidos": dados.get("pedido", "[PEDIDOS A SEREM ESPECIFICADOS]"),
            "valor_causa": f"R$ {dados.get('valorCausa', '0.00')}",
            "documentos": dados.get("documentos", ""),
            "fundamentos_necessarios": fundamentos,
            "competencia": "Justi√ßa do Trabalho" if contexto == "A√ß√£o Trabalhista" else "Justi√ßa Comum",
            "observacoes": f"Documentos anexos: {dados.get('documentos', 'N/A')}",
            "urgencia": False
        }
        
        # Adiciona dados espec√≠ficos do contrato de trabalho, se existirem
        if contexto == "A√ß√£o Trabalhista":
            estrutura_final.update({
                "data_admissao": dados.get("datadmissaoTrabalhista"),
                "data_demissao": dados.get("datademissaoTrabalhista"),
                "salario": dados.get("salarioTrabalhista"),
                "cargo": dados.get("cargo", "[CARGO A SER INFORMADO]"), # Assumindo que um campo 'cargo' possa existir
                "jornada": dados.get("jornadaTrabalhista"),
                "motivo_saida": dados.get("motivosaidaTrablhista")
            })

        return estrutura_final
