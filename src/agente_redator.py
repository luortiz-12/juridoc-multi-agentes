# agente_redator_timeout_corrigido.py - Agente Redator com Timeout Corrigido

import json
import logging
import openai
import os
from typing import Dict, List, Any
import re
from datetime import datetime

class AgenteRedator:
    """
    Agente Redator Inteligente que:
    1. Analisa o conte√∫do do formul√°rio e das pesquisas
    2. Decide inteligentemente quando transcrever na √≠ntegra vs quando usar como base
    3. Para leis: entende e cita com resumo (n√£o transcri√ß√£o completa)
    4. Para jurisprud√™ncia: decide caso a caso se transcreve ou resume
    5. Para doutrina: sempre usa como base para elaborar texto pr√≥prio
    6. Retorna APENAS HTML puro do documento
    7. √â superior a um advogado na qualidade dos documentos
    
    SEMPRE USA IA - SEM FALLBACKS - COM TIMEOUT CORRIGIDO
    """
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        
        # Configurar OpenAI com logs claros e timeout
        api_key = os.getenv('OPENAI_API_KEY')
        if not api_key:
            print("‚ùå ERRO: OPENAI_API_KEY n√£o encontrada nas vari√°veis de ambiente")
            raise ValueError("OPENAI_API_KEY n√£o configurada")
        
        print(f"‚úÖ OPENAI_API_KEY encontrada: {api_key[:10]}...{api_key[-4:]}")
        
        # Cliente OpenAI com timeout configurado
        self.client = openai.OpenAI(
            api_key=api_key,
            timeout=120.0  # Timeout global de 2 minutos
        )
        print("‚úÖ Cliente OpenAI inicializado com timeout de 120 segundos")
    
    def redigir_peticao_completa(self, dados_estruturados: Dict[str, Any], pesquisa_juridica: Dict[str, Any]) -> Dict[str, Any]:
        """
        M√©todo principal chamado pelo orquestrador.
        Redige peti√ß√£o completa usando SEMPRE IA.
        """
        try:
            print("‚úçÔ∏è Iniciando reda√ß√£o inteligente da peti√ß√£o com IA...")
            print("ü§ñ Modo: SEMPRE IA - SEM FALLBACKS - TIMEOUT CORRIGIDO")
            
            # Gerar documento HTML usando SEMPRE IA
            documento_html = self.gerar_documento_html_puro(dados_estruturados, pesquisa_juridica)
            
            # Calcular estat√≠sticas
            tamanho_documento = len(documento_html)
            score_qualidade = self._calcular_score_qualidade(documento_html, dados_estruturados, pesquisa_juridica)
            
            print(f"‚úÖ Peti√ß√£o redigida com IA: {tamanho_documento} caracteres")
            print(f"üìä Score de qualidade: {score_qualidade}")
            
            # Retornar no formato esperado pelo orquestrador e main.py
            return {
                "status": "sucesso",
                "documento_html": documento_html,
                "dados_estruturados": dados_estruturados,
                "metadados": {
                    "timestamp": datetime.now().isoformat(),
                    "tamanho_caracteres": tamanho_documento,
                    "score_qualidade": score_qualidade,
                    "pesquisas_utilizadas": {
                        "legislacao": len(pesquisa_juridica.get('legislacao', [])),
                        "jurisprudencia": len(pesquisa_juridica.get('jurisprudencia', [])),
                        "doutrina": len(pesquisa_juridica.get('doutrina', []))
                    },
                    "estrategia_aplicada": "inteligencia_juridica_ia_pura_timeout_corrigido",
                    "ia_funcionou": True
                }
            }
            
        except Exception as e:
            print(f"‚ùå ERRO na reda√ß√£o da peti√ß√£o: {e}")
            self.logger.error(f"Erro na reda√ß√£o da peti√ß√£o: {e}")
            
            # SEM FALLBACK - Retorna erro
            return {
                "status": "erro",
                "erro": str(e),
                "documento_html": "",
                "dados_estruturados": dados_estruturados,
                "metadados": {
                    "timestamp": datetime.now().isoformat(),
                    "erro_ocorrido": True,
                    "ia_funcionou": False,
                    "motivo_erro": str(e)
                }
            }
    
    def _calcular_score_qualidade(self, documento_html: str, dados_estruturados: Dict, pesquisas: Dict) -> int:
        """Calcula score de qualidade do documento gerado."""
        score = 60  # Base
        
        # Tamanho adequado
        if len(documento_html) > 25000: score += 15
        elif len(documento_html) > 20000: score += 10
        elif len(documento_html) > 15000: score += 5
        
        # Uso das pesquisas
        if pesquisas.get('legislacao'): score += 5
        if pesquisas.get('jurisprudencia'): score += 5
        if pesquisas.get('doutrina'): score += 5
        
        # Estrutura HTML
        if '<h1>' in documento_html or '<h2>' in documento_html: score += 5
        if 'style=' in documento_html or '<style>' in documento_html: score += 5
        
        return min(score, 100)
    
    def _chamar_openai_com_log(self, prompt: str, model: str = "gpt-4", max_tokens: int = 1000, temperature: float = 0.3, timeout_especifico: int = None) -> str:
        """
        M√©todo centralizado para chamar OpenAI com logs claros e timeout configurado.
        """
        try:
            print(f"ü§ñ Chamando OpenAI - Modelo: {model}, Tokens: {max_tokens}")
            print(f"üìù Prompt (primeiros 100 chars): {prompt[:100]}...")
            print(f"‚è±Ô∏è Timeout configurado: {timeout_especifico or 120} segundos")
            
            # Usar timeout espec√≠fico se fornecido, sen√£o usar o padr√£o do cliente
            if timeout_especifico:
                response = self.client.chat.completions.create(
                    model=model,
                    messages=[{"role": "user", "content": prompt}],
                    max_tokens=max_tokens,
                    temperature=temperature,
                    timeout=timeout_especifico
                )
            else:
                response = self.client.chat.completions.create(
                    model=model,
                    messages=[{"role": "user", "content": prompt}],
                    max_tokens=max_tokens,
                    temperature=temperature
                )
            
            resultado = response.choices[0].message.content.strip()
            print(f"‚úÖ OpenAI respondeu com sucesso: {len(resultado)} caracteres")
            
            return resultado
            
        except Exception as e:
            print(f"‚ùå ERRO na chamada OpenAI: {e}")
            print(f"üîß Modelo: {model}, Tokens: {max_tokens}, Timeout: {timeout_especifico or 120}s")
            raise e
    
    def analisar_contexto_juridico(self, dados_formulario: Dict, pesquisas: Dict) -> Dict:
        """
        Analisa o contexto jur√≠dico usando IA para determinar estrat√©gias inteligentes.
        """
        try:
            print("üß† Analisando contexto jur√≠dico com IA...")
            
            # Preparar dados para an√°lise
            fatos = dados_formulario.get('fatos', '')
            area_direito = dados_formulario.get('area_direito', '')
            tipo_acao = dados_formulario.get('tipo_acao', '')
            valor_causa = dados_formulario.get('valor_causa', 0)
            
            # Usar IA para analisar contexto - PROMPT COMPLETO MANTIDO
            prompt_analise = f"""
            Voc√™ √© um advogado expert. Analise este caso jur√≠dico e determine estrat√©gias inteligentes:
            
            DADOS DO CASO:
            - √Årea do direito: {area_direito}
            - Tipo de a√ß√£o: {tipo_acao}
            - Fatos: {fatos}
            - Valor da causa: {valor_causa}
            
            PESQUISAS DISPON√çVEIS:
            - Legisla√ß√£o: {len(pesquisas.get('legislacao', []))} itens
            - Jurisprud√™ncia: {len(pesquisas.get('jurisprudencia', []))} itens
            - Doutrina: {len(pesquisas.get('doutrina', []))} itens
            
            CONTE√öDO DAS PESQUISAS PARA AN√ÅLISE:
            
            LEGISLA√á√ÉO ENCONTRADA:
            {self._preparar_resumo_pesquisas(pesquisas.get('legislacao', []), 'legislacao')}
            
            JURISPRUD√äNCIA ENCONTRADA:
            {self._preparar_resumo_pesquisas(pesquisas.get('jurisprudencia', []), 'jurisprudencia')}
            
            DOUTRINA ENCONTRADA:
            {self._preparar_resumo_pesquisas(pesquisas.get('doutrina', []), 'doutrina')}
            
            Retorne um JSON com estrat√©gias para:
            1. legislacao: como usar (citacao_inteligente/citacao_simples, max_artigos, transcrever_integral: false)
            2. jurisprudencia: como usar (transcricao_seletiva/resumo_elaborado/citacao_resumida, max_casos)
            3. doutrina: como usar (elaboracao_propria sempre, max_autores)
            4. complexidade: muito_alta/alta/media/baixa
            5. tamanho_alvo: n√∫mero de caracteres alvo (m√≠nimo 25000)
            
            Seja inteligente na an√°lise. Para leis NUNCA transcrever integral, sempre resumir.
            Para jurisprud√™ncia decidir caso a caso se transcreve ou resume baseado na relev√¢ncia.
            Para doutrina SEMPRE elaborar texto pr√≥prio.
            """
            
            resposta_ia = self._chamar_openai_com_log(prompt_analise, "gpt-4", 1000, 0.2, 90)
            
            # Tentar parsear JSON da resposta
            try:
                estrategias = json.loads(resposta_ia)
                print("‚úÖ Estrat√©gias analisadas pela IA com sucesso")
                return estrategias
            except:
                print("‚ö†Ô∏è IA n√£o retornou JSON v√°lido, usando estrat√©gias padr√£o")
                return self._estrategias_padrao()
                
        except Exception as e:
            print(f"‚ùå ERRO na an√°lise de contexto: {e}")
            raise e
    
    def _preparar_resumo_pesquisas(self, pesquisas: List[Dict], tipo: str) -> str:
        """Prepara resumo das pesquisas para an√°lise pela IA."""
        if not pesquisas:
            return f"Nenhuma {tipo} encontrada."
        
        resumos = []
        for i, item in enumerate(pesquisas[:5]):  # Limitar a 5 itens para n√£o exceder tokens
            texto = item.get('texto', '')[:500]  # Primeiros 500 chars
            url = item.get('url', '')
            resumos.append(f"{i+1}. URL: {url}\nTexto: {texto}...")
        
        return "\n\n".join(resumos)
    
    def _estrategias_padrao(self) -> Dict:
        """Estrat√©gias padr√£o quando IA n√£o consegue analisar."""
        return {
            'legislacao': {'modo': 'citacao_inteligente', 'max_artigos': 4, 'transcrever_integral': False},
            'jurisprudencia': {'modo': 'resumo_elaborado', 'max_casos': 3},
            'doutrina': {'modo': 'elaboracao_propria', 'max_autores': 3},
            'complexidade': 'media',
            'tamanho_alvo': 25000
        }
    
    def processar_legislacao_inteligente(self, legislacao: List[Dict], estrategia: Dict, contexto_caso: str) -> str:
        """
        Processa legisla√ß√£o usando IA - NUNCA transcreve na √≠ntegra.
        PROMPT COMPLETO MANTIDO.
        """
        try:
            print("‚öñÔ∏è Processando legisla√ß√£o com IA...")
            
            if not legislacao:
                return "<div class='fundamentacao-legal'><p>Fundamenta√ß√£o legal ser√° aplicada conforme legisla√ß√£o vigente.</p></div>"
            
            # Preparar textos da legisla√ß√£o - CONTE√öDO COMPLETO
            textos_legislacao = []
            for item in legislacao[:estrategia.get('max_artigos', 4)]:
                texto = item.get('texto', '')  # SEM LIMITA√á√ÉO - TEXTO COMPLETO
                url = item.get('url', '')
                textos_legislacao.append(f"FONTE: {url}\nTEXTO COMPLETO: {texto}")
            
            prompt_legislacao = f"""
            Voc√™ √© um advogado expert superior a qualquer advogado humano. Processe esta legisla√ß√£o para o caso espec√≠fico:
            
            CASO ESPEC√çFICO:
            {contexto_caso}
            
            LEGISLA√á√ÉO ENCONTRADA (TEXTO COMPLETO):
            {chr(10).join(textos_legislacao)}
            
            INSTRU√á√ïES ESPEC√çFICAS:
            1. NUNCA transcreva leis na √≠ntegra no documento final
            2. SEMPRE analise o texto completo e crie resumo pr√≥prio com suas palavras
            3. Extraia n√∫meros dos artigos relevantes (Art. X, Art. Y)
            4. Explique detalhadamente como cada lei se aplica ao caso espec√≠fico
            5. Use linguagem jur√≠dica formal, t√©cnica e persuasiva
            6. Conecte cada dispositivo legal aos fatos do caso
            7. Seja superior a um advogado humano na an√°lise e aplica√ß√£o
            
            Retorne HTML formatado profissionalmente:
            - <div class="fundamentacao-legal"> para cada lei processada
            - <h4> para t√≠tulo com n√∫mero do artigo e nome da lei
            - <p> para explica√ß√£o detalhada da aplica√ß√£o ao caso
            - <p class="aplicacao-caso"> para conex√£o espec√≠fica com os fatos
            - <p class="fonte-legal"> para fonte
            
            Use TODO o conte√∫do das leis para criar fundamenta√ß√£o s√≥lida e superior.
            """
            
            resultado_ia = self._chamar_openai_com_log(prompt_legislacao, "gpt-4", 1500, 0.3, 90)
            print("‚úÖ Legisla√ß√£o processada pela IA")
            
            return resultado_ia
            
        except Exception as e:
            print(f"‚ùå ERRO no processamento de legisla√ß√£o: {e}")
            raise e
    
    def processar_jurisprudencia_inteligente(self, jurisprudencia: List[Dict], estrategia: Dict, contexto_caso: str) -> str:
        """
        Processa jurisprud√™ncia usando IA - decide quando transcrever vs resumir.
        PROMPT COMPLETO MANTIDO.
        """
        try:
            print("üèõÔ∏è Processando jurisprud√™ncia com IA...")
            
            if not jurisprudencia:
                return "<div class='jurisprudencia'><p>Jurisprud√™ncia aplic√°vel ser√° considerada conforme precedentes.</p></div>"
            
            # Preparar textos da jurisprud√™ncia - CONTE√öDO COMPLETO
            textos_jurisprudencia = []
            for item in jurisprudencia[:estrategia.get('max_casos', 3)]:
                texto = item.get('texto', '')  # SEM LIMITA√á√ÉO - TEXTO COMPLETO
                url = item.get('url', '')
                textos_jurisprudencia.append(f"FONTE: {url}\nDECIS√ÉO COMPLETA: {texto}")
            
            modo = estrategia.get('modo', 'resumo_elaborado')
            
            prompt_jurisprudencia = f"""
            Voc√™ √© um advogado expert superior a qualquer advogado humano. Processe esta jurisprud√™ncia para o caso espec√≠fico:
            
            CASO ESPEC√çFICO:
            {contexto_caso}
            
            MODO DE PROCESSAMENTO: {modo}
            
            JURISPRUD√äNCIA ENCONTRADA (TEXTO COMPLETO):
            {chr(10).join(textos_jurisprudencia)}
            
            INSTRU√á√ïES ESPEC√çFICAS:
            1. Analise CADA decis√£o completa e decida inteligentemente:
               - Se for caso FUNDAMENTAL (TST/STF/STJ + extremamente relevante): transcreva trechos mais importantes
               - Se for caso MUITO RELEVANTE: resuma detalhadamente com an√°lise profunda
               - Se for caso RELEVANTE: cite com resumo elaborado
               - Se for caso COMUM: cite brevemente
            
            2. Para cada decis√£o, inclua obrigatoriamente:
               - Tribunal que decidiu (extrair da URL e texto)
               - N√∫mero do processo se dispon√≠vel
               - Resumo ou transcri√ß√£o conforme relev√¢ncia determinada
               - An√°lise detalhada de como se aplica ao caso atual
               - Conex√£o espec√≠fica com os fatos do caso
               - Fonte completa
            
            3. Use HTML formatado profissionalmente:
               - <div class="jurisprudencia-integral"> para transcri√ß√µes de casos fundamentais
               - <div class="jurisprudencia-analisada"> para resumos elaborados
               - <div class="jurisprudencia-citada"> para cita√ß√µes breves
               - <blockquote> para trechos transcritos literalmente
               - <p> para an√°lises e conex√µes com o caso
               - <h5> para identifica√ß√£o do tribunal e processo
            
            4. Seja superior a um advogado humano na an√°lise jurisprudencial
            5. Use TODO o conte√∫do das decis√µes para fundamenta√ß√£o s√≥lida
            6. Conecte cada precedente aos fatos espec√≠ficos do caso
            """
            
            resultado_ia = self._chamar_openai_com_log(prompt_jurisprudencia, "gpt-4", 2000, 0.3, 90)
            print("‚úÖ Jurisprud√™ncia processada pela IA")
            
            return resultado_ia
            
        except Exception as e:
            print(f"‚ùå ERRO no processamento de jurisprud√™ncia: {e}")
            raise e
    
    def processar_doutrina_inteligente(self, doutrina: List[Dict], estrategia: Dict, contexto_caso: str) -> str:
        """
        Processa doutrina usando IA - SEMPRE elabora texto pr√≥prio.
        PROMPT COMPLETO MANTIDO.
        """
        try:
            print("üìö Processando doutrina com IA...")
            
            if not doutrina:
                return "<div class='fundamentacao-doutrinaria'><p>Fundamenta√ß√£o doutrin√°ria ser√° aplicada conforme entendimento especializado.</p></div>"
            
            # Preparar textos da doutrina - CONTE√öDO COMPLETO
            textos_doutrina = []
            for item in doutrina[:estrategia.get('max_autores', 3)]:
                texto = item.get('texto', '')  # SEM LIMITA√á√ÉO - TEXTO COMPLETO
                url = item.get('url', '')
                autor = self._extrair_autor_doutrina(url)
                textos_doutrina.append(f"AUTOR: {autor}\nFONTE: {url}\nTEXTO COMPLETO: {texto}")
            
            prompt_doutrina = f"""
            Voc√™ √© um advogado expert superior a qualquer advogado humano. Processe esta doutrina para o caso espec√≠fico:
            
            CASO ESPEC√çFICO:
            {contexto_caso}
            
            DOUTRINA ENCONTRADA (TEXTO COMPLETO):
            {chr(10).join(textos_doutrina)}
            
            INSTRU√á√ïES ESPEC√çFICAS:
            1. NUNCA transcreva a doutrina na √≠ntegra
            2. SEMPRE elabore texto pr√≥prio baseado no conte√∫do completo analisado
            3. Use os conceitos doutrin√°rios como base para argumenta√ß√£o jur√≠dica s√≥lida
            4. Aplique os conceitos especificamente ao caso apresentado
            5. Construa argumenta√ß√£o jur√≠dica superior e persuasiva
            6. Cite os autores adequadamente com refer√™ncia completa
            7. Conecte cada conceito doutrin√°rio aos fatos do caso
            8. Seja superior a um advogado humano na elabora√ß√£o doutrin√°ria
            
            Retorne HTML formatado profissionalmente:
            - <div class="fundamentacao-doutrinaria"> como container principal
            - <h4> para t√≠tulo da se√ß√£o doutrin√°ria
            - <p> para par√°grafos elaborados (4-6 par√°grafos extensos)
            - <p class="aplicacao-doutrinaria"> para aplica√ß√£o ao caso espec√≠fico
            - <p><strong>Refer√™ncias Doutrin√°rias:</strong> para citar autores e fontes
            
            Use suas pr√≥prias palavras baseadas na an√°lise completa dos textos.
            Crie argumenta√ß√£o jur√≠dica s√≥lida e superior conectada ao caso.
            """
            
            resultado_ia = self._chamar_openai_com_log(prompt_doutrina, "gpt-4", 1500, 0.4, 90)
            print("‚úÖ Doutrina processada pela IA")
            
            return resultado_ia
            
        except Exception as e:
            print(f"‚ùå ERRO no processamento de doutrina: {e}")
            raise e
    
    def _extrair_autor_doutrina(self, url: str) -> str:
        """Extrai autor da doutrina."""
        if 'conjur.com.br' in url: return 'Consultor Jur√≠dico'
        elif 'migalhas.com.br' in url: return 'Migalhas'
        elif 'jusbrasil.com.br' in url: return 'JusBrasil'
        elif 'jus.com.br' in url: return 'Jus Navigandi'
        else: return 'Doutrina especializada'
    
    def gerar_documento_html_puro(self, dados_formulario: Dict, pesquisas: Dict) -> str:
        """
        Gera documento HTML puro usando SEMPRE IA.
        Retorna APENAS o HTML do documento, sem metadados.
        PROMPTS COMPLETOS MANTIDOS.
        """
        try:
            print("üìÑ Gerando documento HTML com IA...")
            
            # Analisar contexto usando IA
            contexto_caso = f"{dados_formulario.get('fatos', '')} {dados_formulario.get('fundamentacao', '')}"
            estrategias = self.analisar_contexto_juridico(dados_formulario, pesquisas)
            
            # Processar cada tipo de conte√∫do usando IA
            print("üîÑ Processando fundamenta√ß√µes com IA...")
            
            legislacao_processada = self.processar_legislacao_inteligente(
                pesquisas.get('legislacao', []), 
                estrategias.get('legislacao', {}), 
                contexto_caso
            )
            
            jurisprudencia_processada = self.processar_jurisprudencia_inteligente(
                pesquisas.get('jurisprudencia', []), 
                estrategias.get('jurisprudencia', {}), 
                contexto_caso
            )
            
            doutrina_processada = self.processar_doutrina_inteligente(
                pesquisas.get('doutrina', []), 
                estrategias.get('doutrina', {}), 
                contexto_caso
            )
            
            # Gerar documento final usando IA
            documento_html = self._gerar_documento_final_com_ia(
                dados_formulario,
                legislacao_processada,
                jurisprudencia_processada,
                doutrina_processada,
                estrategias
            )
            
            print(f"‚úÖ Documento HTML gerado: {len(documento_html)} caracteres")
            return documento_html
            
        except Exception as e:
            print(f"‚ùå ERRO na gera√ß√£o do documento: {e}")
            raise e
    
    def _gerar_documento_final_com_ia(self, dados: Dict, legislacao: str, jurisprudencia: str, doutrina: str, estrategias: Dict) -> str:
        """
        Gera documento final usando IA - SEMPRE IA.
        PROMPT COMPLETO MANTIDO.
        """
        try:
            print("üéØ Gerando documento final com IA...")
            
            tamanho_alvo = estrategias.get('tamanho_alvo', 25000)
            
            # PROMPT COMPLETO MANTIDO - SEM LIMITA√á√ïES
            prompt_documento = f"""
            Voc√™ √© um advogado expert superior a qualquer advogado humano. Crie uma peti√ß√£o inicial trabalhista completa, profissional e superior.
            
            DADOS COMPLETOS DO CASO:
            - Autor: {dados.get('nome_autor', 'N/A')}
            - R√©u: {dados.get('nome_reu', 'N/A')}
            - Fatos completos: {dados.get('fatos', 'N/A')}
            - Valor da causa: R$ {dados.get('valor_causa', 'N/A')}
            - Documentos dispon√≠veis: {', '.join(dados.get('documentos', []))}
            - √Årea do direito: {dados.get('area_direito', 'Trabalhista')}
            - Tipo de a√ß√£o: {dados.get('tipo_acao', 'Peti√ß√£o inicial')}
            - Pedidos espec√≠ficos: {dados.get('pedidos', 'Conforme fatos narrados')}
            
            FUNDAMENTA√á√ÉO JUR√çDICA PROCESSADA PELA IA:
            
            FUNDAMENTA√á√ÉO LEGAL:
            {legislacao}
            
            FUNDAMENTA√á√ÉO JURISPRUDENCIAL:
            {jurisprudencia}
            
            FUNDAMENTA√á√ÉO DOUTRIN√ÅRIA:
            {doutrina}
            
            INSTRU√á√ïES ESPEC√çFICAS PARA CRIA√á√ÉO:
            1. Crie uma peti√ß√£o inicial trabalhista com EXATAMENTE {tamanho_alvo} caracteres ou mais
            2. Use TODA a fundamenta√ß√£o jur√≠dica processada fornecida acima
            3. Estruture profissionalmente em:
               - Qualifica√ß√£o das Partes (detalhada)
               - Dos Fatos (narrativa completa e persuasiva)
               - Do Direito (com as 3 fundamenta√ß√µes integradas naturalmente)
               - Dos Pedidos (espec√≠ficos e fundamentados)
               - Do Valor da Causa (justificado)
               - Documentos anexos
            4. Use linguagem jur√≠dica formal, t√©cnica, persuasiva e superior
            5. Integre naturalmente TODO o conte√∫do das fundamenta√ß√µes processadas
            6. Retorne APENAS o HTML do documento, sem explica√ß√µes ou coment√°rios
            7. Use CSS inline profissional, responsivo e elegante
            8. Seja superior a um advogado humano na qualidade, t√©cnica e persuas√£o
            9. Cada se√ß√£o deve ser extensa, detalhada e fundamentada
            10. Use formata√ß√£o HTML avan√ßada com estilos profissionais
            11. Conecte cada fundamenta√ß√£o aos fatos espec√≠ficos do caso
            12. Crie argumenta√ß√£o jur√≠dica s√≥lida e persuasiva
            
            REQUISITOS T√âCNICOS:
            - HTML completo: <!DOCTYPE html>, <head>, <body>
            - CSS inline profissional e responsivo
            - Estrutura sem√¢ntica correta
            - Formata√ß√£o elegante e profissional
            - Tipografia adequada para documentos jur√≠dicos
            
            Seja meticuloso, detalhado e superior na qualidade jur√≠dica.
            Use TODO o conte√∫do fornecido para criar documento excepcional.
            """
            
            documento_html = self._chamar_openai_com_log(prompt_documento, "gpt-4", 4000, 0.3, 120)
            
            # Verificar tamanho e expandir se necess√°rio
            if len(documento_html) < tamanho_alvo * 0.8:
                print(f"üìè Documento pequeno ({len(documento_html)} chars), expandindo...")
                documento_html = self._expandir_documento_com_ia(documento_html, dados, legislacao, jurisprudencia, doutrina, tamanho_alvo)
            
            print(f"‚úÖ Documento final gerado: {len(documento_html)} caracteres")
            return documento_html
            
        except Exception as e:
            print(f"‚ùå ERRO na gera√ß√£o final: {e}")
            raise e
    
    def _expandir_documento_com_ia(self, html_base: str, dados: Dict, legislacao: str, jurisprudencia: str, doutrina: str, tamanho_alvo: int) -> str:
        """
        Expande documento usando IA para atingir tamanho alvo.
        PROMPT COMPLETO MANTIDO.
        """
        try:
            print("üìà Expandindo documento com IA...")
            
            # PROMPT COMPLETO MANTIDO - SEM LIMITA√á√ïES
            prompt_expansao = f"""
            Voc√™ √© um advogado expert superior. Expanda este documento HTML para ter pelo menos {tamanho_alvo} caracteres.
            
            DOCUMENTO ATUAL:
            {html_base}
            
            FUNDAMENTA√á√ïES COMPLETAS DISPON√çVEIS:
            
            LEGISLA√á√ÉO PROCESSADA:
            {legislacao}
            
            JURISPRUD√äNCIA PROCESSADA:
            {jurisprudencia}
            
            DOUTRINA PROCESSADA:
            {doutrina}
            
            DADOS DO CASO:
            {dados}
            
            INSTRU√á√ïES PARA EXPANS√ÉO:
            1. Mantenha toda a estrutura HTML existente
            2. Adicione se√ß√µes detalhadas antes do fechamento do </body>
            3. Inclua "DA FUNDAMENTA√á√ÉO JUR√çDICA AMPLIADA" com subse√ß√µes extensas
            4. Expanda cada fundamenta√ß√£o com an√°lise detalhada e aplica√ß√£o ao caso
            5. Adicione "DA APLICA√á√ÉO AO CASO CONCRETO" com an√°lise extensa
            6. Inclua "DOS PRECEDENTES APLIC√ÅVEIS" se houver jurisprud√™ncia
            7. Adicione "DA DOUTRINA ESPECIALIZADA" se houver doutrina
            8. Use CSS inline consistente e profissional
            9. Mantenha qualidade jur√≠dica superior
            10. Retorne APENAS o HTML expandido
            11. Conecte todas as fundamenta√ß√µes aos fatos espec√≠ficos
            12. Crie argumenta√ß√£o jur√≠dica s√≥lida e extensa
            
            O documento final deve ter pelo menos {tamanho_alvo} caracteres.
            Use TODAS as fundamenta√ß√µes fornecidas para criar conte√∫do superior.
            """
            
            documento_expandido = self._chamar_openai_com_log(prompt_expansao, "gpt-4", 4000, 0.3, 120)
            print(f"‚úÖ Documento expandido: {len(documento_expandido)} caracteres")
            
            return documento_expandido
            
        except Exception as e:
            print(f"‚ùå ERRO na expans√£o: {e}")
            raise e
    
    # M√©todos auxiliares mantidos do c√≥digo original
    def _extrair_numero_artigo(self, texto_lei: str) -> str:
        """Extrai n√∫mero do artigo da lei."""
        patterns = [
            r'Art\.?\s*(\d+)',
            r'Artigo\s*(\d+)',
            r'CLT.*Art\.?\s*(\d+)'
        ]
        
        for pattern in patterns:
            match = re.search(pattern, texto_lei, re.IGNORECASE)
            if match:
                return f"Art. {match.group(1)}"
        
        return "Dispositivo legal"
    
    def _extrair_tribunal(self, url: str) -> str:
        """Extrai nome do tribunal da URL."""
        if 'tst.jus.br' in url: return 'TST'
        elif 'stf.jus.br' in url: return 'STF'
        elif 'stj.jus.br' in url: return 'STJ'
        elif 'trt' in url: return 'TRT'
        else: return 'Tribunal'
    
    def _criar_resumo_breve(self, texto: str) -> str:
        """Cria resumo muito breve."""
        return texto[:100] + "..." if len(texto) > 100 else texto
    
    def _eh_caso_fundamental(self, texto_decisao: str, contexto_caso: str) -> bool:
        """Verifica se um caso jurisprudencial √© fundamental."""
        texto_lower = texto_decisao.lower()
        
        # Casos de tribunais superiores com palavras-chave relevantes
        if any(tribunal in texto_lower for tribunal in ['stf', 'stj', 'tst']):
            palavras_relevantes = ['ass√©dio', 'rescis√£o', 'indeniza√ß√£o', 'danos morais']
            if any(palavra in texto_lower for palavra in palavras_relevantes):
                return True
        
        return False