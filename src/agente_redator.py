# agente_redator.py - Agente Redator com Pr√©-Processamento Inteligente

import json
import logging
import openai
import os
from typing import Dict, List, Any
import re
from datetime import datetime
import traceback

class AgenteRedator:
    """
    Agente Redator Inteligente que implementa uma estrat√©gia de duas etapas:
    1. PR√â-PROCESSAMENTO: Usa a IA para ler a pesquisa completa e extrair apenas os trechos mais relevantes.
    2. REDA√á√ÉO FINAL: Usa a IA para redigir a peti√ß√£o, integrando os trechos j√° filtrados.
    Isso garante alta qualidade, evita perda de contexto e previne timeouts.
    """
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        
        api_key = os.getenv('OPENAI_API_KEY')
        if not api_key:
            print("‚ùå ERRO: OPENAI_API_KEY n√£o encontrada nas vari√°veis de ambiente")
            raise ValueError("OPENAI_API_KEY n√£o configurada")
        
        print(f"‚úÖ OPENAI_API_KEY encontrada: {api_key[:10]}...{api_key[-4:]}")
        
        self.client = openai.OpenAI(
            api_key=api_key,
            timeout=300.0
        )
        print("‚úÖ Cliente OpenAI inicializado com sucesso.")

    def redigir_peticao_completa(self, dados_estruturados: Dict[str, Any], pesquisa_juridica: Dict[str, Any]) -> Dict[str, Any]:
        """
        M√©todo principal que orquestra a gera√ß√£o da peti√ß√£o.
        """
        try:
            print("‚úçÔ∏è Iniciando reda√ß√£o inteligente da peti√ß√£o com IA...")
            
            documento_html = self.gerar_documento_html_puro(dados_estruturados, pesquisa_juridica)
            
            tamanho_documento = len(documento_html)
            score_qualidade = self._calcular_score_qualidade(documento_html, dados_estruturados)
            
            print(f"‚úÖ Peti√ß√£o finalizada com IA: {tamanho_documento} caracteres")
            print(f"üìä Score de qualidade: {score_qualidade}")
            
            return {
                "status": "sucesso",
                "documento_html": documento_html,
                "dados_estruturados": dados_estruturados,
                "metadados": {
                    "timestamp": datetime.now().isoformat(),
                    "tamanho_caracteres": tamanho_documento,
                    "score_qualidade": score_qualidade,
                    "estrategia_aplicada": "ia_pre_processamento_e_redacao",
                    "ia_funcionou": True
                }
            }
        
        except Exception as e:
            print(f"‚ùå ERRO GERAL na reda√ß√£o da peti√ß√£o: {e}")
            self.logger.error(f"Erro na reda√ß√£o da peti√ß√£o: {traceback.format_exc()}")
            return {"status": "erro", "erro": str(e)}

    def _calcular_score_qualidade(self, documento_html: str, dados_estruturados: Dict) -> int:
        """
        Calcula um score de qualidade b√°sico para o documento gerado.
        """
        score = 50
        if len(documento_html) > 30000: score += 20
        elif len(documento_html) > 20000: score += 10
        
        # Verifica se os nomes das partes foram inseridos
        if dados_estruturados.get('autor', {}).get('nome', '') in documento_html: score += 10
        if dados_estruturados.get('reu', {}).get('nome', '') in documento_html: score += 10
        
        # Verifica se a fundamenta√ß√£o foi minimamente preenchida
        if len(re.findall(r'fundamentacao-item', documento_html)) > 1: score += 10
            
        return min(score, 100)

    def _chamar_openai_com_log(self, prompt: str, model: str, max_tokens: int, temperature: float, timeout_especifico: int) -> str:
        """
        M√©todo centralizado para chamar a API da OpenAI com logs e timeout.
        """
        try:
            print(f"ü§ñ Chamando OpenAI - Modelo: {model}, Tokens: {max_tokens}, Timeout: {timeout_especifico}s")
            print(f"üìù Prompt (in√≠cio): {prompt[:150].strip().replace(chr(10), ' ')}...")
            
            response = self.client.chat.completions.create(
                model=model,
                messages=[{"role": "user", "content": prompt}],
                max_tokens=max_tokens,
                temperature=temperature,
                timeout=float(timeout_especifico)
            )
            
            resultado = response.choices[0].message.content.strip()
            print(f"‚úÖ OpenAI respondeu com sucesso ({len(resultado)} chars)")
            return resultado
        
        except Exception as e:
            print(f"‚ùå ERRO na chamada √† API da OpenAI: {e}")
            self.logger.error(f"Erro na chamada OpenAI: {traceback.format_exc()}")
            raise e

    def _extrair_conteudo_relevante(self, texto_completo: str, contexto_caso: str, tipo: str) -> str:
        """
        PRIMEIRA ETAPA DA IA: Filtra o conte√∫do mais relevante de um documento de pesquisa.
        """
        print(f"üîç Extraindo conte√∫do relevante de '{tipo}'...")
        prompt = f"""
        Voc√™ √© um assistente jur√≠dico de elite. Sua tarefa √© analisar o texto completo de um documento ({tipo}) e extrair APENAS os trechos mais relevantes para o caso em quest√£o.

        CASO: "{contexto_caso[:1500]}"

        DOCUMENTO COMPLETO:
        ---
        {texto_completo}
        ---

        INSTRU√á√ïES:
        - Se for legisla√ß√£o, extraia os artigos que se aplicam diretamente aos fatos.
        - Se for jurisprud√™ncia, extraia a ementa e os 2-3 par√°grafos do voto que s√£o cruciais para o caso.
        - Se for doutrina, extraia os 2-3 par√°grafos que definem os conceitos-chave do caso.
        - Retorne APENAS os trechos extra√≠dos, sem nenhuma explica√ß√£o ou formata√ß√£o adicional.
        """
        # Usamos um modelo mais r√°pido e um timeout menor para esta tarefa de extra√ß√£o
        return self._chamar_openai_com_log(prompt, "gpt-4-turbo", 1500, 0.1, 120)

    def processar_fundamentacao(self, pesquisas: List[Dict], tipo: str, contexto_caso: str) -> str:
        """
        SEGUNDA ETAPA DA IA: Pega os trechos relevantes e os transforma em um bloco de HTML fundamentado.
        """
        try:
            print(f"üìÑ Processando fundamenta√ß√£o de '{tipo}' com IA...")
            if not pesquisas: return ""

            conteudo_relevante_agregado = ""
            # Limita a an√°lise aos 2 primeiros documentos para agilidade e custo
            for item in pesquisas[:2]:
                texto_completo = item.get('texto', '')
                if texto_completo:
                    trechos_relevantes = self._extrair_conteudo_relevante(texto_completo, contexto_caso, tipo)
                    conteudo_relevante_agregado += f"\n\n--- Fonte: {item.get('url', 'N/A')} ---\n{trechos_relevantes}"

            if not conteudo_relevante_agregado:
                return f"<div class='fundamentacao-item erro'><p>Nenhum conte√∫do relevante de {tipo} foi encontrado para este caso.</p></div>"

            prompt_formatacao = f"""
            Voc√™ √© um advogado s√™nior. Com base nos trechos relevantes abaixo, crie um bloco de fundamenta√ß√£o jur√≠dica em HTML.

            CASO: "{contexto_caso[:1000]}"
            
            TRECHOS RELEVANTES DE {tipo.upper()}:
            {conteudo_relevante_agregado}

            INSTRU√á√ïES:
            1. Crie um texto coeso e autoral, usando os trechos como base.
            2. Se for jurisprud√™ncia, use `<blockquote>` para cita√ß√µes diretas.
            3. Explique como cada ponto se aplica aos fatos do caso.
            4. Retorne um √∫nico bloco de HTML formatado com a classe 'fundamentacao-item'.
            """
            return self._chamar_openai_com_log(prompt_formatacao, "gpt-4", 2000, 0.3, 180)

        except Exception as e:
            print(f"‚ùå ERRO no processamento de {tipo}: {e}")
            return f"<div class='fundamentacao-item erro'><p>Ocorreu um erro ao processar a {tipo}. A argumenta√ß√£o se basear√° nos princ√≠pios gerais do direito.</p></div>"

    def gerar_documento_html_puro(self, dados_formulario: Dict, pesquisas: Dict) -> str:
        """
        Orquestra a an√°lise, o pr√©-processamento e a gera√ß√£o final do documento HTML.
        """
        contexto_caso = f"Fatos: {dados_formulario.get('fatos', '')}. Pedidos: {dados_formulario.get('pedidos', '')}"
        
        print("üîÑ Iniciando pr√©-processamento das fundamenta√ß√µes...")
        
        legislacao_html = self.processar_fundamentacao(pesquisas.get('legislacao', []), "legisla√ß√£o", contexto_caso)
        print("\n--- HTML GERADO (LEGISLA√á√ÉO) ---\n", legislacao_html, "\n---------------------------------\n")

        jurisprudencia_html = self.processar_fundamentacao(pesquisas.get('jurisprudencia', []), "jurisprud√™ncia", contexto_caso)
        print("\n--- HTML GERADO (JURISPRUD√äNCIA) ---\n", jurisprudencia_html, "\n---------------------------------\n")

        doutrina_html = self.processar_fundamentacao(pesquisas.get('doutrina', []), "doutrina", contexto_caso)
        print("\n--- HTML GERADO (DOUTRINA) ---\n", doutrina_html, "\n---------------------------------\n")

        return self._gerar_documento_final_com_ia(dados_formulario, legislacao_html, jurisprudencia_html, doutrina_html)

    def _gerar_documento_final_com_ia(self, dados: Dict, legislacao: str, jurisprudencia: str, doutrina: str) -> str:
        """
        ETAPA FINAL: Monta a peti√ß√£o completa, integrando os blocos de HTML j√° prontos.
        """
        print("üéØ Montando o documento final com IA...")
        
        prompt_documento = f"""
        Voc√™ √© um advogado s√™nior, especialista em reda√ß√£o de peti√ß√µes. Sua tarefa √© redigir uma peti√ß√£o inicial trabalhista completa, coesa, persuasiva e com pelo menos 30.000 caracteres.

        DADOS DO CASO:
        {json.dumps(dados, ensure_ascii=False, indent=2)}

        BLOCOS DE FUNDAMENTA√á√ÉO JUR√çDICA (J√Å PROCESSADOS E FORMATADOS EM HTML):
        
        BLOCO DE LEGISLA√á√ÉO:
        {legislacao if legislacao else "<p>Nenhuma legisla√ß√£o espec√≠fica foi processada.</p>"}

        BLOCO DE JURISPRUD√äNCIA:
        {jurisprudencia if jurisprudencia else "<p>Nenhuma jurisprud√™ncia espec√≠fica foi processada.</p>"}

        BLOCO DE DOUTRINA:
        {doutrina if doutrina else "<p>Nenhuma doutrina espec√≠fica foi processada.</p>"}

        INSTRU√á√ïES FINAIS DE REDA√á√ÉO:
        1. Crie uma peti√ß√£o inicial completa com **pelo menos 30.000 caracteres**. Para isso, detalhe extensivamente cada se√ß√£o.
        2. Use os dados do caso para preencher as se√ß√µes de Qualifica√ß√£o e Fatos de forma muito detalhada.
        3. Na se√ß√£o "DO DIREITO", integre os tr√™s blocos de fundamenta√ß√£o (Legisla√ß√£o, Jurisprud√™ncia, Doutrina) de forma natural e coesa. Expanda a an√°lise, conectando os pontos e construindo uma narrativa jur√≠dica robusta.
        4. Formule a se√ß√£o "DOS PEDIDOS" de forma clara e objetiva.
        5. Retorne APENAS o c√≥digo HTML completo do documento.
        6. Utilize um CSS inline profissional e elegante (font-family: 'Times New Roman', serif; line-height: 1.6;).
        """
        
        return self._chamar_openai_com_log(prompt_documento, "gpt-4-turbo", 4000, 0.4, 240)

    def _extrair_autor_doutrina(self, url: str) -> str:
        """Extrai o nome do autor/fonte a partir da URL."""
        if 'conjur.com.br' in url: return 'Consultor Jur√≠dico'
        if 'migalhas.com.br' in url: return 'Migalhas'
        return 'Doutrina especializada'
