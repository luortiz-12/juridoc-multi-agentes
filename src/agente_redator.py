# agente_redator.py - Agente Redator Inteligente e Otimizado

import json
import logging
import openai
import os
from typing import Dict, List, Any
import re
from datetime import datetime

class AgenteRedator:
    """
    Agente Redator Inteligente que:
    1. Analisa o conte√∫do do formul√°rio e das pesquisas usando IA.
    2. Pr√©-processa legisla√ß√£o, jurisprud√™ncia e doutrina em blocos de HTML fundamentados.
    3. Usa os blocos pr√©-processados para redigir um documento final coeso e de alta qualidade.
    4. Retorna APENAS o HTML puro do documento.
    5. √â superior a um advogado na qualidade dos documentos.
    
    SEMPRE USA IA - SEM FALLBACKS - COM TIMEOUTS AJUSTADOS
    """
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        
        # --- COMENT√ÅRIO: Configura√ß√£o do cliente OpenAI ---
        # Garante que a chave de API seja carregada e define um timeout global
        # como uma camada de seguran√ßa, embora cada chamada ter√° seu pr√≥prio timeout.
        api_key = os.getenv('OPENAI_API_KEY')
        if not api_key:
            print("‚ùå ERRO: OPENAI_API_KEY n√£o encontrada nas vari√°veis de ambiente")
            raise ValueError("OPENAI_API_KEY n√£o configurada")
        
        print(f"‚úÖ OPENAI_API_KEY encontrada: {api_key[:10]}...{api_key[-4:]}")
        
        self.client = openai.OpenAI(
            api_key=api_key,
            timeout=300.0  # Timeout global de 5 minutos, para seguran√ßa.
        )
        print("‚úÖ Cliente OpenAI inicializado com sucesso.")

    def redigir_peticao_completa(self, dados_estruturados: Dict[str, Any], pesquisa_juridica: Dict[str, Any]) -> Dict[str, Any]:
        """
        M√©todo principal chamado pelo orquestrador.
        Redige a peti√ß√£o completa usando SEMPRE IA.
        """
        try:
            print("‚úçÔ∏è Iniciando reda√ß√£o inteligente da peti√ß√£o com IA...")
            
            # --- COMENT√ÅRIO: Execu√ß√£o do fluxo principal de reda√ß√£o ---
            documento_html = self.gerar_documento_html_puro(dados_estruturados, pesquisa_juridica)
            
            tamanho_documento = len(documento_html)
            score_qualidade = self._calcular_score_qualidade(documento_html, dados_estruturados, pesquisa_juridica)
            
            print(f"‚úÖ Peti√ß√£o redigida com IA: {tamanho_documento} caracteres")
            print(f"üìä Score de qualidade: {score_qualidade}")
            
            return {
                "status": "sucesso",
                "documento_html": documento_html,
                "dados_estruturados": dados_estruturados,
                "metadados": {
                    "timestamp": datetime.now().isoformat(),
                    "tamanho_caracteres": tamanho_documento,
                    "score_qualidade": score_qualidade,
                    "pesquisas_utilizadas": {
                        "legislacao": len(pesquisa_juridica.get('legislacao', [])),
                        "jurisprudencia": len(pesquisa_juridica.get('jurisprudencia', [])),
                        "doutrina": len(pesquisa_juridica.get('doutrina', []))
                    },
                    "estrategia_aplicada": "inteligencia_juridica_ia_pura",
                    "ia_funcionou": True
                }
            }
        
        except Exception as e:
            print(f"‚ùå ERRO GERAL na reda√ß√£o da peti√ß√£o: {e}")
            self.logger.error(f"Erro na reda√ß√£o da peti√ß√£o: {traceback.format_exc()}")
            
            return {
                "status": "erro",
                "erro": str(e),
                "documento_html": "",
                "dados_estruturados": dados_estruturados,
                "metadados": {
                    "timestamp": datetime.now().isoformat(),
                    "erro_ocorrido": True,
                    "ia_funcionou": False,
                    "motivo_erro": str(e)
                }
            }

    def _chamar_openai_com_log(self, prompt: str, model: str, max_tokens: int, temperature: float, timeout_especifico: int) -> str:
        """
        M√©todo centralizado para chamar a API da OpenAI com logs e timeout espec√≠fico.
        """
        try:
            print(f"ü§ñ Chamando OpenAI - Modelo: {model}, Tokens de Resposta: {max_tokens}, Timeout: {timeout_especifico}s")
            print(f"üìù Prompt (primeiros 150 chars): {prompt[:150].strip().replace(chr(10), ' ')}...")
            
            response = self.client.chat.completions.create(
                model=model,
                messages=[{"role": "user", "content": prompt}],
                max_tokens=max_tokens,
                temperature=temperature,
                timeout=float(timeout_especifico)
            )
            
            resultado = response.choices[0].message.content.strip()
            print(f"‚úÖ OpenAI respondeu com sucesso: {len(resultado)} caracteres")
            return resultado
        
        except Exception as e:
            print(f"‚ùå ERRO na chamada √† API da OpenAI: {e}")
            self.logger.error(f"Erro na chamada OpenAI: {traceback.format_exc()}")
            raise e

    def _preparar_resumo_pesquisas(self, pesquisas: List[Dict], tipo: str) -> str:
        """
        Cria um resumo conciso dos itens de pesquisa para serem usados no prompt de an√°lise.
        """
        if not pesquisas:
            return f"Nenhuma {tipo} encontrada."
        
        resumos = []
        for i, item in enumerate(pesquisas[:3]):  # Limita a 3 itens para o resumo
            texto_resumido = item.get('texto', '')[:300]
            url = item.get('url', '')
            resumos.append(f"{i+1}. URL: {url}\nTrecho: {texto_resumido}...")
        
        return "\n\n".join(resumos)

    def analisar_contexto_juridico(self, dados_formulario: Dict, pesquisas: Dict) -> Dict:
        """
        Usa a IA para analisar o contexto e definir as estrat√©gias de reda√ß√£o.
        """
        try:
            print("üß† Analisando contexto jur√≠dico com IA...")
            
            prompt_analise = f"""
            Voc√™ √© um advogado estrategista. Analise o caso abaixo e retorne um JSON com as melhores estrat√©gias de reda√ß√£o.

            DADOS DO CASO:
            - Fatos: {dados_formulario.get('fatos', '')[:1000]}
            - Pedidos: {dados_formulario.get('pedidos', '')}
            - Resumo da Pesquisa de Legisla√ß√£o: {self._preparar_resumo_pesquisas(pesquisas.get('legislacao', []), 'legisla√ß√£o')}
            - Resumo da Pesquisa de Jurisprud√™ncia: {self._preparar_resumo_pesquisas(pesquisas.get('jurisprudencia', []), 'jurisprud√™ncia')}

            Com base na an√°lise, retorne um objeto JSON com a seguinte estrutura:
            {{
              "legislacao": {{"modo": "citacao_inteligente", "max_artigos": 3, "transcrever_integral": false}},
              "jurisprudencia": {{"modo": "resumo_elaborado", "max_casos": 2}},
              "doutrina": {{"modo": "elaboracao_propria", "max_autores": 2}},
              "complexidade": "media",
              "tamanho_alvo": 20000
            }}

            Instru√ß√µes para a decis√£o:
            - Se os fatos envolverem ass√©dio ou dano moral, a complexidade √© 'alta'.
            - Se a jurisprud√™ncia do TST/STF for muito relevante, o modo deve ser 'transcricao_seletiva'.
            - O 'tamanho_alvo' deve ser no m√≠nimo 20000. Se a complexidade for 'alta', aumente para 30000.
            - Retorne APENAS o objeto JSON.
            """
            
            resposta_ia = self._chamar_openai_com_log(prompt_analise, "gpt-4", 800, 0.1, 90)
            
            # Extrai o JSON da resposta da IA, mesmo que tenha texto adicional.
            match = re.search(r'\{.*\}', resposta_ia, re.DOTALL)
            if match:
                estrategias = json.loads(match.group(0))
                print("‚úÖ Estrat√©gias analisadas pela IA com sucesso")
                return estrategias
            else:
                print("‚ö†Ô∏è IA n√£o retornou JSON v√°lido, usando estrat√©gias padr√£o")
                return self._estrategias_padrao()
        
        except Exception as e:
            print(f"‚ùå ERRO na an√°lise de contexto com IA: {e}")
            raise e

    def processar_legislacao_inteligente(self, legislacao: List[Dict], estrategia: Dict, contexto_caso: str) -> str:
        """
        Usa a IA para criar um bloco HTML com resumos e aplica√ß√£o da legisla√ß√£o ao caso.
        """
        try:
            print("‚öñÔ∏è Processando legisla√ß√£o com IA...")
            if not legislacao: return ""

            textos_legislacao = [f"FONTE: {item.get('url', '')}\nTEXTO: {item.get('texto', '')[:4000]}" for item in legislacao[:estrategia.get('max_artigos', 3)]]
            
            prompt_legislacao = f"""
            Voc√™ √© um advogado s√™nior. Analise os dispositivos legais abaixo e sua aplica√ß√£o a um caso concreto.

            CASO CONCRETO: "{contexto_caso[:1000]}"

            DISPOSITIVOS LEGAIS:
            {chr(10).join(textos_legislacao)}

            INSTRU√á√ïES:
            1. Para cada dispositivo, escreva um par√°grafo explicando sua ess√™ncia.
            2. Em seguida, escreva um segundo par√°grafo conectando o dispositivo diretamente aos fatos do caso.
            3. NUNCA transcreva a lei. Crie um texto pr√≥prio.
            4. Retorne um √∫nico bloco de HTML formatado profissionalmente, contendo todos os artigos analisados.
            
            Exemplo de formato para UM artigo:
            <div class='fundamentacao-item'>
              <h4>Do Art. 483 da CLT ‚Äì A Rescis√£o Indireta</h4>
              <p>O artigo 483 da Consolida√ß√£o das Leis do Trabalho (CLT) estabelece as hip√≥teses em que o empregado pode considerar o contrato de trabalho rescindido por falta grave do empregador...</p>
              <p class='aplicacao-caso'>No presente caso, a conduta da Reclamada de n√£o pagar as horas extras e de permitir um ambiente com ass√©dio moral se enquadra diretamente na al√≠nea 'd' do referido artigo...</p>
            </div>
            """
            
            return self._chamar_openai_com_log(prompt_legislacao, "gpt-4", 1500, 0.3, 120)
        
        except Exception as e:
            print(f"‚ùå ERRO no processamento de legisla√ß√£o: {e}")
            raise e

    def processar_jurisprudencia_inteligente(self, jurisprudencia: List[Dict], estrategia: Dict, contexto_caso: str) -> str:
        """
        Usa a IA para criar um bloco HTML com an√°lise da jurisprud√™ncia, decidindo se resume ou transcreve trechos.
        """
        try:
            print("üèõÔ∏è Processando jurisprud√™ncia com IA...")
            if not jurisprudencia: return ""

            textos_jurisprudencia = [f"FONTE: {item.get('url', '')}\nDECIS√ÉO: {item.get('texto', '')[:4000]}" for item in jurisprudencia[:estrategia.get('max_casos', 2)]]
            
            prompt_jurisprudencia = f"""
            Voc√™ √© um advogado especialista em jurisprud√™ncia. Analise as decis√µes abaixo e sua aplica√ß√£o a um caso concreto.

            CASO CONCRETO: "{contexto_caso[:1000]}"

            DECIS√ïES ENCONTRADAS:
            {chr(10).join(textos_jurisprudencia)}

            INSTRU√á√ïES:
            1. Para cada decis√£o, identifique o tribunal e o ponto principal.
            2. Se a decis√£o for de um Tribunal Superior (TST, STF) e diretamente aplic√°vel, transcreva o trecho mais relevante dentro de um `<blockquote>`.
            3. Para todas as decis√µes, escreva um par√°grafo de an√°lise, explicando como o precedente fortalece a tese do caso concreto.
            4. Retorne um √∫nico bloco de HTML formatado profissionalmente.

            Exemplo de formato:
            <div class='fundamentacao-item'>
              <h4>Entendimento do Tribunal Superior do Trabalho sobre Ass√©dio Moral</h4>
              <p>O TST possui entendimento consolidado de que o ass√©dio moral, caracterizado por condutas abusivas, gera o dever de indenizar...</p>
              <blockquote>"A pr√°tica de ass√©dio moral pelo empregador gera direito √† indeniza√ß√£o por danos morais..."</blockquote>
              <p class='aplicacao-caso'>Tal precedente √© diretamente aplic√°vel ao caso, uma vez que a Reclamante foi submetida a cobran√ßas vexat√≥rias e humilhantes de forma cont√≠nua...</p>
            </div>
            """
            
            return self._chamar_openai_com_log(prompt_jurisprudencia, "gpt-4", 1500, 0.3, 120)
        
        except Exception as e:
            print(f"‚ùå ERRO no processamento de jurisprud√™ncia: {e}")
            raise e

    def processar_doutrina_inteligente(self, doutrina: List[Dict], estrategia: Dict, contexto_caso: str) -> str:
        """
        Usa a IA para criar um bloco HTML com um texto autoral baseado na doutrina pesquisada.
        """
        try:
            print("üìö Processando doutrina com IA...")
            if not doutrina: return ""

            textos_doutrina = [f"AUTOR: {self._extrair_autor_doutrina(item.get('url', ''))}\nTEXTO: {item.get('texto', '')[:4000]}" for item in doutrina[:estrategia.get('max_autores', 2)]]
            
            prompt_doutrina = f"""
            Voc√™ √© um jurista renomado. Com base nos textos doutrin√°rios abaixo, elabore um texto autoral sobre os temas abordados e sua aplica√ß√£o ao caso concreto.

            CASO CONCRETO: "{contexto_caso[:1000]}"

            TEXTOS DOUTRIN√ÅRIOS DE BASE:
            {chr(10).join(textos_doutrina)}

            INSTRU√á√ïES:
            1. NUNCA transcreva os textos. Use-os como inspira√ß√£o e base conceitual.
            2. Elabore um texto autoral de 3 a 4 par√°grafos, construindo uma argumenta√ß√£o coesa sobre os temas (ex: rescis√£o indireta, dano moral).
            3. Conecte sua argumenta√ß√£o doutrin√°ria diretamente aos fatos do caso.
            4. Retorne um √∫nico bloco de HTML formatado profissionalmente.

            Exemplo de formato:
            <div class='fundamentacao-item'>
              <h4>Da Configura√ß√£o do Ass√©dio Moral e o Dever de Indenizar</h4>
              <p>A doutrina p√°tria √© un√≠ssona ao definir o ass√©dio moral como a exposi√ß√£o prolongada e repetitiva do trabalhador a situa√ß√µes humilhantes e constrangedoras...</p>
              <p class='aplicacao-caso'>No caso da Reclamante, as cobran√ßas vexat√≥rias realizadas pelo Sr. Gerson, de forma p√∫blica e reiterada, configuram um exemplo cl√°ssico da conduta descrita pela doutrina, atentando contra sua dignidade e tornando o ambiente de trabalho insustent√°vel...</p>
            </div>
            """
            
            return self._chamar_openai_com_log(prompt_doutrina, "gpt-4", 1500, 0.4, 120)
        
        except Exception as e:
            print(f"‚ùå ERRO no processamento de doutrina: {e}")
            raise e

    def gerar_documento_html_puro(self, dados_formulario: Dict, pesquisas: Dict) -> str:
        """
        Orquestra a an√°lise, o pr√©-processamento e a gera√ß√£o final do documento HTML.
        """
        try:
            print("üìÑ Iniciando orquestra√ß√£o da gera√ß√£o de documento HTML...")
            
            contexto_caso = f"Fatos: {dados_formulario.get('fatos', '')}. Pedidos: {dados_formulario.get('pedidos', '')}"
            estrategias = self.analisar_contexto_juridico(dados_formulario, pesquisas)
            
            print("üîÑ Processando fundamenta√ß√µes com IA...")
            
            legislacao_processada = self.processar_legislacao_inteligente(
                pesquisas.get('legislacao', []), 
                estrategias.get('legislacao', {}), 
                contexto_caso
            )
            
            # --- COMENT√ÅRIO: Log de depura√ß√£o para verificar a sa√≠da do processamento ---
            print("\n--- HTML GERADO (LEGISLA√á√ÉO) ---\n", legislacao_processada, "\n---------------------------------\n")

            jurisprudencia_processada = self.processar_jurisprudencia_inteligente(
                pesquisas.get('jurisprudencia', []), 
                estrategias.get('jurisprudencia', {}), 
                contexto_caso
            )
            
            print("\n--- HTML GERADO (JURISPRUD√äNCIA) ---\n", jurisprudencia_processada, "\n---------------------------------\n")

            doutrina_processada = self.processar_doutrina_inteligente(
                pesquisas.get('doutrina', []), 
                estrategias.get('doutrina', {}), 
                contexto_caso
            )
            
            print("\n--- HTML GERADO (DOUTRINA) ---\n", doutrina_processada, "\n---------------------------------\n")

            documento_html = self._gerar_documento_final_com_ia(
                dados_formulario,
                legislacao_processada,
                jurisprudencia_processada,
                doutrina_processada,
                estrategias
            )
            
            print(f"‚úÖ Documento HTML final gerado: {len(documento_html)} caracteres")
            return documento_html
        
        except Exception as e:
            print(f"‚ùå ERRO na orquestra√ß√£o da gera√ß√£o do documento: {e}")
            raise e

    def _gerar_documento_final_com_ia(self, dados: Dict, legislacao: str, jurisprudencia: str, doutrina: str, estrategias: Dict) -> str:
        """
        Usa a IA para montar a peti√ß√£o final, integrando os blocos de fundamenta√ß√£o j√° processados.
        """
        try:
            print("üéØ Montando o documento final com IA...")
            
            tamanho_alvo = estrategias.get('tamanho_alvo', 25000)
            
            prompt_documento = f"""
            Voc√™ √© um advogado s√™nior, especialista em reda√ß√£o de peti√ß√µes. Sua tarefa √© redigir uma peti√ß√£o inicial trabalhista completa, coesa e persuasiva, utilizando os blocos de informa√ß√£o fornecidos.

            DADOS DO CASO:
            - Autor: {json.dumps(dados.get('autor', {}), ensure_ascii=False)}
            - R√©u: {json.dumps(dados.get('reu', {}), ensure_ascii=False)}
            - Fatos: {dados.get('fatos', '')}
            - Pedidos: {dados.get('pedidos', '')}
            - Valor da Causa: {dados.get('valor_causa', '')}

            BLOCOS DE FUNDAMENTA√á√ÉO JUR√çDICA (J√Å PROCESSADOS):
            
            BLOCO DE LEGISLA√á√ÉO:
            {legislacao}

            BLOCO DE JURISPRUD√äNCIA:
            {jurisprudencia}

            BLOCO DE DOUTRINA:
            {doutrina}

            INSTRU√á√ïES FINAIS DE REDA√á√ÉO:
            1. Crie uma peti√ß√£o inicial completa com no m√≠nimo {tamanho_alvo} caracteres.
            2. Use os dados do caso para preencher as se√ß√µes de Qualifica√ß√£o e Fatos.
            3. Na se√ß√£o "DO DIREITO", integre os tr√™s blocos de fundamenta√ß√£o (Legisla√ß√£o, Jurisprud√™ncia, Doutrina) de forma natural e coesa. N√£o apenas copie e cole, mas crie uma narrativa jur√≠dica fluida.
            4. Formule a se√ß√£o "DOS PEDIDOS" de forma clara e objetiva, baseada nos pedidos fornecidos.
            5. Retorne APENAS o c√≥digo HTML completo do documento. N√£o inclua explica√ß√µes, coment√°rios ou a palavra "HTML".
            6. Utilize um CSS inline profissional e elegante, com boa tipografia (ex: 'Times New Roman', serif), espa√ßamento adequado e uma estrutura limpa.

            O resultado deve ser um documento HTML pronto para ser salvo e utilizado, de qualidade superior √† de um advogado humano.
            """
            
            return self._chamar_openai_com_log(prompt_documento, "gpt-4", 4000, 0.3, 240)
        
        except Exception as e:
            print(f"‚ùå ERRO na gera√ß√£o final do documento: {e}")
            raise e

    # --- COMENT√ÅRIO: M√©todos auxiliares mantidos para extra√ß√£o de dados e fallback ---
    def _extrair_numero_artigo(self, texto_lei: str) -> str:
        patterns = [r'Art\.?\s*(\d+)', r'Artigo\s*(\d+)', r'CLT.*Art\.?\s*(\d+)']
        for pattern in patterns:
            match = re.search(pattern, texto_lei, re.IGNORECASE)
            if match:
                return f"Art. {match.group(1)}"
        return "Dispositivo Legal"

    def _gerar_documento_emergencia(self, dados: Dict) -> str:
        # Este m√©todo agora s√≥ seria chamado se a exce√ß√£o n√£o fosse capturada antes.
        # √â uma √∫ltima camada de seguran√ßa.
        print("üö® ATEN√á√ÉO: Gerando documento de emerg√™ncia. A IA falhou em todas as etapas.")
        autor = dados.get('autor', {})
        reu = dados.get('reu', {})
        pedidos_lista = dados.get('pedidos', 'Pedidos a serem especificados.')
        if isinstance(pedidos_lista, str):
            pedidos_lista = [pedidos_lista] # Garante que seja uma lista para o join

        return f"""<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <title>Peti√ß√£o Inicial - MODO DE EMERG√äNCIA</title>
    <style>
        body {{ font-family: 'Times New Roman', serif; margin: 40px; line-height: 1.6; color: #333; }}
        h1 {{ text-align: center; color: #d9534f; }}
        h2 {{ color: #555; border-bottom: 1px solid #ccc; padding-bottom: 5px; }}
        .erro-aviso {{ text-align: center; font-weight: bold; color: #a94442; background-color: #f2dede; padding: 15px; border-radius: 4px; margin-bottom: 20px; }}
    </style>
</head>
<body>
    <div class="erro-aviso"><p>ATEN√á√ÉO: Este documento foi gerado em modo de emerg√™ncia devido a uma falha cr√≠tica no sistema de IA.</p></div>
    <h1>PETI√á√ÉO INICIAL</h1>
    <h2>I - QUALIFICA√á√ÉO DAS PARTES</h2>
    <p><strong>RECLAMANTE:</strong> {autor.get('nome', 'N/A')}, {autor.get('qualificacao', 'qualifica√ß√£o pendente')}.</p>
    <p><strong>RECLAMADA:</strong> {reu.get('nome', 'N/A')}, {reu.get('qualificacao', 'qualifica√ß√£o pendente')}.</p>
    <h2>II - DOS FATOS</h2>
    <p>{dados.get('fatos', 'Fatos a serem detalhados.')}</p>
    <h2>III - DOS PEDIDOS</h2>
    <ul><li>{"</li><li>".join(pedidos_lista)}</li></ul>
    <h2>IV - DO VALOR DA CAUSA</h2>
    <p>D√°-se √† causa o valor de R$ {dados.get('valor_causa', '0,00')}.</p>
    <p style="text-align: center; margin-top: 50px;">Termos em que, pede deferimento.</p>
</body>
</html>"""