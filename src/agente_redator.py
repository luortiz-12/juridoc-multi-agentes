# agente_redator.py - Agente Redator com Pr√©-Processamento Inteligente e Cita√ß√£o Integral de Jurisprud√™ncia

import json
import logging
import openai
import os
from typing import Dict, List, Any
import re
from datetime import datetime
import traceback

class AgenteRedator:
    """
    Agente Redator Inteligente que implementa uma estrat√©gia de duas etapas:
    1. PR√â-PROCESSAMENTO: Usa a IA para ler a pesquisa e criar blocos de fundamenta√ß√£o em HTML.
       - Para jurisprud√™ncia, a IA √© instru√≠da a citar os trechos mais importantes na √≠ntegra.
       - Para legisla√ß√£o e doutrina, a IA cria textos autorais explicativos.
    2. REDA√á√ÉO FINAL: Usa a IA para redigir a peti√ß√£o, integrando e expandindo massivamente os blocos j√° prontos para atingir o tamanho alvo.
    """
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        
        api_key = os.getenv('OPENAI_API_KEY')
        if not api_key:
            print("‚ùå ERRO: OPENAI_API_KEY n√£o encontrada nas vari√°veis de ambiente")
            raise ValueError("OPENAI_API_KEY n√£o configurada")
        
        print(f"‚úÖ OPENAI_API_KEY encontrada: {api_key[:10]}...{api_key[-4:]}")
        
        self.client = openai.OpenAI(
            api_key=api_key,
            timeout=300.0
        )
        print("‚úÖ Cliente OpenAI inicializado com sucesso.")

    def redigir_peticao_completa(self, dados_estruturados: Dict[str, Any], pesquisa_juridica: Dict[str, Any]) -> Dict[str, Any]:
        """
        M√©todo principal que orquestra a gera√ß√£o da peti√ß√£o.
        """
        try:
            print("‚úçÔ∏è Iniciando reda√ß√£o inteligente da peti√ß√£o com IA...")
            
            documento_html = self.gerar_documento_html_puro(dados_estruturados, pesquisa_juridica)
            
            tamanho_documento = len(documento_html)
            score_qualidade = self._calcular_score_qualidade(documento_html, dados_estruturados)
            
            print(f"‚úÖ Peti√ß√£o finalizada com IA: {tamanho_documento} caracteres")
            print(f"üìä Score de qualidade: {score_qualidade}")
            
            return {
                "status": "sucesso",
                "documento_html": documento_html,
                "dados_estruturados": dados_estruturados,
                "metadados": {
                    "timestamp": datetime.now().isoformat(),
                    "tamanho_caracteres": tamanho_documento,
                    "score_qualidade": score_qualidade,
                    "estrategia_aplicada": "ia_pre_processamento_com_citacao_e_redacao_final",
                    "ia_funcionou": True
                }
            }
        
        except Exception as e:
            print(f"‚ùå ERRO GERAL na reda√ß√£o da peti√ß√£o: {e}")
            self.logger.error(f"Erro na reda√ß√£o da peti√ß√£o: {traceback.format_exc()}")
            return {"status": "erro", "erro": str(e), "dados_estruturados": dados_estruturados}

    def _calcular_score_qualidade(self, documento_html: str, dados_estruturados: Dict) -> int:
        """
        Calcula um score de qualidade b√°sico para o documento gerado.
        """
        score = 50
        if len(documento_html) > 30000: score += 20
        elif len(documento_html) > 15000: score += 10
        
        if dados_estruturados.get('autor', {}).get('nome', '') in documento_html: score += 10
        if dados_estruturados.get('reu', {}).get('nome', '') in documento_html: score += 10
        
        if "DO DIREITO" in documento_html and len(documento_html.split("DO DIREITO")[1]) > 500: score += 10
            
        return min(score, 100)

    def _chamar_openai_com_log(self, prompt: str, model: str, max_tokens: int, temperature: float, timeout_especifico: int) -> str:
        """
        M√©todo centralizado para chamar a API da OpenAI com logs e timeout.
        """
        try:
            print(f"ü§ñ Chamando OpenAI - Modelo: {model}, Tokens: {max_tokens}, Timeout: {timeout_especifico}s")
            print(f"üìù Prompt (in√≠cio): {prompt[:200].strip().replace(chr(10), ' ')}...")
            
            response = self.client.chat.completions.create(
                model=model,
                messages=[{"role": "user", "content": prompt}],
                max_tokens=max_tokens,
                temperature=temperature,
                timeout=float(timeout_especifico)
            )
            
            resultado = response.choices[0].message.content.strip()
            resultado = re.sub(r'^```html|```$', '', resultado).strip()
            print(f"‚úÖ OpenAI respondeu com sucesso ({len(resultado)} chars)")
            return resultado
        
        except Exception as e:
            print(f"‚ùå ERRO na chamada √† API da OpenAI: {e}")
            self.logger.error(f"Erro na chamada OpenAI: {traceback.format_exc()}")
            raise e

    def processar_fundamentacao(self, pesquisas: List[Dict], tipo: str, contexto_caso: str) -> str:
        """
        ETAPA DE PR√â-PROCESSAMENTO: Pega os trechos relevantes e os transforma em um bloco de HTML fundamentado,
        com cita√ß√£o integral para jurisprud√™ncia.
        """
        try:
            print(f"üìÑ Processando fundamenta√ß√£o de '{tipo}' com IA...")
            if not pesquisas: return ""

            conteudo_para_analise = ""
            for item in pesquisas[:2]:
                texto_completo = item.get('texto', '')
                if texto_completo:
                    conteudo_para_analise += f"\n\n--- Fonte: {item.get('url', 'N/A')} ---\n{texto_completo[:8000]}"

            if not conteudo_para_analise:
                return f"<div class='fundamentacao-item erro'><p>Nenhum conte√∫do de {tipo} foi encontrado para an√°lise.</p></div>"

            # --- AJUSTE CR√çTICO NO PROMPT ---
            # Instru√ß√µes espec√≠ficas para cada tipo de pesquisa.
            prompt_formatacao = f"""
            Voc√™ √© um advogado s√™nior. Com base nos trechos de pesquisa abaixo, crie um bloco de fundamenta√ß√£o jur√≠dica em HTML para uma peti√ß√£o.

            CONTEXTO DO CASO: "{contexto_caso[:1000]}"
            
            TRECHOS DE PESQUISA DE {tipo.upper()}:
            {conteudo_para_analise}

            INSTRU√á√ïES DETALHADAS:
            - Se o tipo for 'legisla√ß√£o', explique os artigos de lei mais importantes e como se aplicam ao caso. N√ÉO transcreva os artigos literalmente.
            - Se o tipo for 'jurisprud√™ncia', sua tarefa principal √© identificar a ementa e os trechos mais importantes do voto. **TRANSCREVA ESSES TRECHOS NA √çNTEGRA** dentro de `<blockquote>`. Ap√≥s a cita√ß√£o, adicione um par√°grafo de an√°lise conectando o precedente ao caso concreto.
            - Se o tipo for 'doutrina', resuma os principais argumentos dos autores e explique sua relev√¢ncia para o caso.
            - Crie um texto jur√≠dico coeso e autoral, em portugu√™s do Brasil.
            - Retorne um √∫nico bloco de HTML formatado profissionalmente, usando a classe 'fundamentacao-item' para cada t√≥pico.
            """
            return self._chamar_openai_com_log(prompt_formatacao, "gpt-4o", 2000, 0.3, 180)

        except Exception as e:
            print(f"‚ùå ERRO no processamento de {tipo}: {e}")
            return f"<div class='fundamentacao-item erro'><p>Ocorreu um erro ao processar a {tipo}. A argumenta√ß√£o se basear√° nos princ√≠pios gerais do direito.</p></div>"

    def gerar_documento_html_puro(self, dados_formulario: Dict, pesquisas: Dict) -> str:
        """
        Orquestra a an√°lise, o pr√©-processamento e a gera√ß√£o final do documento HTML.
        """
        contexto_caso = f"Fatos: {dados_formulario.get('fatos', '')}. Pedidos: {dados_formulario.get('pedidos', '')}"
        
        print("üîÑ Iniciando pr√©-processamento das fundamenta√ß√µes...")
        
        legislacao_html = self.processar_fundamentacao(pesquisas.get('legislacao', []), "legisla√ß√£o", contexto_caso)
        jurisprudencia_html = self.processar_fundamentacao(pesquisas.get('jurisprudencia', []), "jurisprud√™ncia", contexto_caso)
        doutrina_html = self.processar_fundamentacao(pesquisas.get('doutrina', []), "doutrina", contexto_caso)

        return self._gerar_documento_final_com_ia(dados_formulario, legislacao_html, jurisprudencia_html, doutrina_html)

    def _gerar_documento_final_com_ia(self, dados: Dict, legislacao: str, jurisprudencia: str, doutrina: str) -> str:
        """
        ETAPA FINAL: Monta a peti√ß√£o completa, integrando e expandindo massivamente os blocos de HTML.
        """
        print("üéØ Montando o documento final com IA...")
        
        prompt_documento = f"""
        Voc√™ √© um advogado s√™nior, especialista em reda√ß√£o de peti√ß√µes. Sua tarefa √© redigir uma peti√ß√£o inicial trabalhista EXTREMAMENTE DETALHADA, coesa, persuasiva e com pelo menos 30.000 caracteres.

        DADOS DO CASO:
        {json.dumps(dados, ensure_ascii=False, indent=2)}

        BLOCOS DE FUNDAMENTA√á√ÉO JUR√çDICA (J√Å PROCESSADOS PELA IA):
        
        BLOCO DE LEGISLA√á√ÉO:
        {legislacao if legislacao else "<p>Nenhuma legisla√ß√£o espec√≠fica foi processada.</p>"}

        BLOCO DE JURISPRUD√äNCIA:
        {jurisprudencia if jurisprudencia else "<p>Nenhuma jurisprud√™ncia espec√≠fica foi processada.</p>"}

        BLOCO DE DOUTRINA:
        {doutrina if doutrina else "<p>Nenhuma doutrina espec√≠fica foi processada.</p>"}

        INSTRU√á√ïES FINAIS DE REDA√á√ÉO (MUITO IMPORTANTE):
        1. **META DE TAMANHO OBRIGAT√ìRIA:** O documento final deve ter **pelo menos 30.000 caracteres**. Para atingir esta meta, voc√™ deve ser prolixo, detalhista e exaustivo em CADA se√ß√£o. Um documento curto ser√° considerado uma falha.
        2. **EXPANS√ÉO DOS FATOS:** Na se√ß√£o "DOS FATOS", n√£o se limite a repetir os dados. Detalhe o cotidiano da Reclamante, descreva o ambiente de trabalho, narre exemplos espec√≠ficos de humilha√ß√£o e explique o impacto do n√£o pagamento das horas extras na sua vida. Crie uma narrativa rica e detalhada.
        3. **EXPANS√ÉO DO DIREITO:** Na se√ß√£o "DO DIREITO", integre os tr√™s blocos de fundamenta√ß√£o fornecidos. **N√ÉO os insira como placeholders**. Use o conte√∫do deles (incluindo as cita√ß√µes em `<blockquote>` que voc√™ receber√°) para construir uma argumenta√ß√£o jur√≠dica robusta, detalhada e fluida, conectando cada ponto aos fatos do caso. Expanda a an√°lise com seus conhecimentos. Crie subt√≥picos como "Da Rescis√£o Indireta", "Das Horas Extras N√£o Remuneradas", "Do Ass√©dio Moral e o Dano Existencial".
        4. **DETALHAMENTO DOS PEDIDOS:** Na se√ß√£o "DOS PEDIDOS", n√£o apenas liste os pedidos. Crie um par√°grafo para cada pedido, explicando o seu fundamento legal e o porqu√™ de sua aplica√ß√£o ao caso concreto.
        5. **FORMATA√á√ÉO ESTRITA:** **Retorne APENAS o c√≥digo HTML completo do documento, come√ßando com `<!DOCTYPE html>` e terminando com `</html>`. N√ÉO inclua explica√ß√µes, coment√°rios ou formata√ß√£o de markdown como \`\`\`html.**
        6. **ESTILO:** Utilize um CSS inline profissional e elegante (font-family: 'Times New Roman', serif; line-height: 1.8; text-align: justify;).
        """
        
        return self._chamar_openai_com_log(prompt_documento, "gpt-4o", 4000, 0.4, 240)

    def _extrair_autor_doutrina(self, url: str) -> str:
        """Extrai o nome do autor/fonte a partir da URL."""
        if 'conjur.com.br' in url: return 'Consultor Jur√≠dico'
        if 'migalhas.com.br' in url: return 'Migalhas'
        return 'Doutrina especializada'
