# agente_redator_ia_pura.py - Agente Redator que SEMPRE usa IA

import json
import logging
import openai
import os
from typing import Dict, List, Any
import re
from datetime import datetime

class AgenteRedator:
    """
    Agente Redator Inteligente que:
    1. Analisa o conte√∫do do formul√°rio e das pesquisas
    2. Decide inteligentemente quando transcrever na √≠ntegra vs quando usar como base
    3. Para leis: entende e cita com resumo (n√£o transcri√ß√£o completa)
    4. Para jurisprud√™ncia: decide caso a caso se transcreve ou resume
    5. Para doutrina: sempre usa como base para elaborar texto pr√≥prio
    6. Retorna APENAS HTML puro do documento
    7. √â superior a um advogado na qualidade dos documentos
        SEMPRE USA IA - SEM FALLBACKS
    """
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        
        # Configurar OpenAI com logs claros
        api_key = os.getenv('OPENAI_API_KEY')
        if not api_key:
            print("‚ùå ERRO: OPENAI_API_KEY n√£o encontrada nas vari√°veis de ambiente")
            raise ValueError("OPENAI_API_KEY n√£o configurada")
        
        print(f"‚úÖ OPENAI_API_KEY encontrada: {api_key[:10]}...{api_key[-4:]}")
        
        self.client = openai.OpenAI(api_key=api_key)
        print("‚úÖ Cliente OpenAI inicializado com sucesso")
        
    def redigir_peticao_completa(self, dados_estruturados: Dict[str, Any], pesquisa_juridica: Dict[str, Any]) -> Dict[str, Any]:
        """
        M√©todo principal chamado pelo orquestrador.
        Redige peti√ß√£o completa usando SEMPRE IA.
        """
        try:
            print("‚úçÔ∏è Iniciando reda√ß√£o inteligente da peti√ß√£o com IA...")
            print("ü§ñ Modo: SEMPRE IA - SEM FALLBACKS")
            
            # Gerar documento HTML usando SEMPRE IA
            documento_html = self.gerar_documento_html_puro(dados_estruturados, pesquisa_juridica)
            
            # Calcular estat√≠sticas
            tamanho_documento = len(documento_html)
            score_qualidade = self._calcular_score_qualidade(documento_html, dados_estruturados, pesquisa_juridica)
            
            print(f"‚úÖ Peti√ß√£o redigida com IA: {tamanho_documento} caracteres")
            print(f"üìä Score de qualidade: {score_qualidade}")
            
            # Retornar no formato esperado pelo orquestrador e main.py
            return {
                "status": "sucesso",
                "documento_html": documento_html,
                "dados_estruturados": dados_estruturados,
                "metadados": {
                    "timestamp": datetime.now().isoformat(),
                    "tamanho_caracteres": tamanho_documento,
                    "score_qualidade": score_qualidade,
                    "pesquisas_utilizadas": {
                        "legislacao": len(pesquisa_juridica.get('legislacao', [])),
                        "jurisprudencia": len(pesquisa_juridica.get('jurisprudencia', [])),
                        "doutrina": len(pesquisa_juridica.get('doutrina', []))
                    },
                    "estrategia_aplicada": "inteligencia_juridica_ia_pura",
                    "ia_funcionou": True
                }
            }
        
        except Exception as e:
            print(f"‚ùå ERRO na reda√ß√£o da peti√ß√£o: {e}")
            self.logger.error(f"Erro na reda√ß√£o da peti√ß√£o: {e}")
            
            # SEM FALLBACK - Retorna erro
            return {
                "status": "erro",
                "erro": str(e),
                "documento_html": "",
                "dados_estruturados": dados_estruturados,
                "metadados": {
                    "timestamp": datetime.now().isoformat(),
                    "erro_ocorrido": True,
                    "ia_funcionou": False,
                    "motivo_erro": str(e)
                }
            }

    def _calcular_score_qualidade(self, documento_html: str, dados_estruturados: Dict, pesquisas: Dict) -> int:
        """Calcula score de qualidade do documento gerado."""
        score = 60  # Base
        
        # Tamanho adequado
        if len(documento_html) > 25000: score += 15
        elif len(documento_html) > 20000: score += 10
        elif len(documento_html) > 15000: score += 5
        
        # Uso das pesquisas
        if pesquisas.get('legislacao'): score += 5
        if pesquisas.get('jurisprudencia'): score += 5
        if pesquisas.get('doutrina'): score += 5
        
        # Estrutura HTML
        if '<h1>' in documento_html or '<h2>' in documento_html: score += 5
        if 'style=' in documento_html or '<style>' in documento_html: score += 5
        
        return min(score, 100)

    def _chamar_openai_com_log(self, prompt: str, model: str = "gpt-4", max_tokens: int = 1000, temperature: float = 0.3) -> str:
        """
        M√©todo centralizado para chamar OpenAI com logs claros.
        """
        try:
            print(f"ü§ñ Chamando OpenAI - Modelo: {model}, Tokens: {max_tokens}")
            print(f"üìù Prompt (primeiros 100 chars): {prompt[:100]}...")
            
            response = self.client.chat.completions.create(
                model=model,
                messages=[{"role": "user", "content": prompt}],
                max_tokens=max_tokens,
                temperature=temperature
            )
            
            resultado = response.choices[0].message.content.strip()
            print(f"‚úÖ OpenAI respondeu com sucesso: {len(resultado)} caracteres")
            
            return resultado
        
        except Exception as e:
            print(f"‚ùå ERRO na chamada OpenAI: {e}")
            print(f"üîß Modelo: {model}, Tokens: {max_tokens}")
            raise e

    def analisar_contexto_juridico(self, dados_formulario: Dict, pesquisas: Dict) -> Dict:
        """
        Analisa o contexto jur√≠dico usando IA para determinar estrat√©gias inteligentes.
        """
        try:
            print("üß† Analisando contexto jur√≠dico com IA...")
            
            # Preparar dados para an√°lise
            fatos = dados_formulario.get('fatos', '')
            area_direito = dados_formulario.get('area_direito', '')
            tipo_acao = dados_formulario.get('tipo_acao', '')
            valor_causa = dados_formulario.get('valor_causa', 0)
            
            # Usar IA para analisar contexto
            prompt_analise = f"""
            Voc√™ √© um advogado expert. Analise este caso jur√≠dico e determine estrat√©gias inteligentes:

            DADOS DO CASO:
            - √Årea do direito: {area_direito}
            - Tipo de a√ß√£o: {tipo_acao}
            - Fatos: {fatos[:1000]}
            - Valor da causa: {valor_causa}

            PESQUISAS DISPON√çVEIS:
            - Legisla√ß√£o: {len(pesquisas.get('legislacao', []))} itens
            - Jurisprud√™ncia: {len(pesquisas.get('jurisprudencia', []))} itens
            - Doutrina: {len(pesquisas.get('doutrina', []))} itens

            Retorne um JSON com estrat√©gias para:
            1. legislacao: como usar (citacao_inteligente/citacao_simples, max_artigos, transcrever_integral: false)
            2. jurisprudencia: como usar (transcricao_seletiva/resumo_elaborado/citacao_resumida, max_casos)
            3. doutrina: como usar (elaboracao_propria sempre, max_autores)
            4. complexidade: muito_alta/alta/media/baixa
            5. tamanho_alvo: n√∫mero de caracteres alvo

            Seja inteligente na an√°lise. Para leis NUNCA transcrever integral, sempre resumir.
            Para jurisprud√™ncia decidir caso a caso se transcreve ou resume.
            Para doutrina SEMPRE elaborar texto pr√≥prio.
            """
            
            resposta_ia = self._chamar_openai_com_log(prompt_analise, "gpt-4", 800, 0.2)
            
            # Tentar parsear JSON da resposta
            try:
                estrategias = json.loads(resposta_ia)
                print("‚úÖ Estrat√©gias analisadas pela IA com sucesso")
                return estrategias
            except:
                print("‚ö†Ô∏è IA n√£o retornou JSON v√°lido, usando estrat√©gias padr√£o")
                return self._estrategias_padrao()
        
        except Exception as e:
            print(f"‚ùå ERRO na an√°lise de contexto: {e}")
            raise e

    def _estrategias_padrao(self) -> Dict:
        """Estrat√©gias padr√£o quando IA n√£o consegue analisar."""
        return {
            'legislacao': {'modo': 'citacao_inteligente', 'max_artigos': 4, 'transcrever_integral': False},
            'jurisprudencia': {'modo': 'resumo_elaborado', 'max_casos': 3},
            'doutrina': {'modo': 'elaboracao_propria', 'max_autores': 3},
            'complexidade': 'media',
            'tamanho_alvo': 25000
        }

    def processar_legislacao_inteligente(self, legislacao: List[Dict], estrategia: Dict, contexto_caso: str) -> str:
        """
        Processa legisla√ß√£o usando IA - NUNCA transcreve na √≠ntegra.
        """
        try:
            print("‚öñÔ∏è Processando legisla√ß√£o com IA...")
            
            if not legislacao:
                return "<div class='fundamentacao-legal'><p>Fundamenta√ß√£o legal ser√° aplicada conforme legisla√ß√£o vigente.</p></div>"
            
            # Preparar textos da legisla√ß√£o
            textos_legislacao = []
            for item in legislacao[:estrategia.get('max_artigos', 4)]:
                texto = item.get('texto', '')[:1000]  # Limitar para n√£o exceder tokens
                url = item.get('url', '')
                textos_legislacao.append(f"Texto: {texto}\nURL: {url}")
            
            prompt_legislacao = f"""
            Voc√™ √© um advogado expert. Processe esta legisla√ß√£o para o caso:

            CASO: {contexto_caso[:500]}

            LEGISLA√á√ÉO ENCONTRADA:
            {chr(10).join(textos_legislacao)}

            INSTRU√á√ïES:
            1. NUNCA transcreva leis na √≠ntegra
            2. SEMPRE cite e resuma com suas pr√≥prias palavras
            3. Extraia n√∫meros dos artigos (Art. X)
            4. Explique como cada lei se aplica ao caso espec√≠fico
            5. Use linguagem jur√≠dica formal

            Retorne HTML formatado com:
            - <div class="fundamentacao-legal"> para cada lei
            - <h4> para t√≠tulo com n√∫mero do artigo
            - <p> para explica√ß√£o da aplica√ß√£o
            - <p class="fonte-legal"> para fonte

            Seja superior a um advogado na qualidade da an√°lise.
            """
            
            resultado_ia = self._chamar_openai_com_log(prompt_legislacao, "gpt-4", 1200, 0.3)
            print("‚úÖ Legisla√ß√£o processada pela IA")
            
            return resultado_ia
        
        except Exception as e:
            print(f"‚ùå ERRO no processamento de legisla√ß√£o: {e}")
            raise e

    def processar_jurisprudencia_inteligente(self, jurisprudencia: List[Dict], estrategia: Dict, contexto_caso: str) -> str:
        """
        Processa jurisprud√™ncia usando IA - decide quando transcrever vs resumir.
        """
        try:
            print("üèõÔ∏è Processando jurisprud√™ncia com IA...")
            
            if not jurisprudencia:
                return "<div class='jurisprudencia'><p>Jurisprud√™ncia aplic√°vel ser√° considerada conforme precedentes.</p></div>"
            
            # Preparar textos da jurisprud√™ncia
            textos_jurisprudencia = []
            for item in jurisprudencia[:estrategia.get('max_casos', 3)]:
                texto = item.get('texto', '')[:1500]  # Limitar para n√£o exceder tokens
                url = item.get('url', '')
                textos_jurisprudencia.append(f"Decis√£o: {texto}\nURL: {url}")
            
            modo = estrategia.get('modo', 'resumo_elaborado')
            
            prompt_jurisprudencia = f"""
            Voc√™ √© um advogado expert. Processe esta jurisprud√™ncia para o caso:

            CASO: {contexto_caso[:500]}
            MODO: {modo}

            JURISPRUD√äNCIA ENCONTRADA:
            {chr(10).join(textos_jurisprudencia)}

            INSTRU√á√ïES:
            1. Analise cada decis√£o e decida inteligentemente:
               - Se for caso FUNDAMENTAL (TST/STF/STJ + muito relevante): transcreva trechos importantes
               - Se for caso RELEVANTE: resuma detalhadamente com an√°lise
               - Se for caso COMUM: cite brevemente

            2. Para cada decis√£o, inclua:
               - Tribunal que decidiu
               - Resumo ou transcri√ß√£o conforme relev√¢ncia
               - An√°lise de como se aplica ao caso atual
               - Fonte

            3. Use HTML formatado:
               - <div class="jurisprudencia-integral"> para transcri√ß√µes
               - <div class="jurisprudencia-analisada"> para resumos
               - <blockquote> para trechos transcritos
               - <p> para an√°lises

            Seja superior a um advogado na an√°lise jurisprudencial.
            """
            
            resultado_ia = self._chamar_openai_com_log(prompt_jurisprudencia, "gpt-4", 1500, 0.3)
            print("‚úÖ Jurisprud√™ncia processada pela IA")
            
            return resultado_ia
        
        except Exception as e:
            print(f"‚ùå ERRO no processamento de jurisprud√™ncia: {e}")
            raise e

    def processar_doutrina_inteligente(self, doutrina: List[Dict], estrategia: Dict, contexto_caso: str) -> str:
        """
        Processa doutrina usando IA - SEMPRE elabora texto pr√≥prio.
        """
        try:
            print("üìö Processando doutrina com IA...")
            
            if not doutrina:
                return "<div class='fundamentacao-doutrinaria'><p>Fundamenta√ß√£o doutrin√°ria ser√° aplicada conforme entendimento especializado.</p></div>"
            
            # Preparar textos da doutrina
            textos_doutrina = []
            for item in doutrina[:estrategia.get('max_autores', 3)]:
                texto = item.get('texto', '')[:1000]  # Limitar para n√£o exceder tokens
                url = item.get('url', '')
                autor = self._extrair_autor_doutrina(url)
                textos_doutrina.append(f"Autor: {autor}\nTexto: {texto}\nURL: {url}")
            
            prompt_doutrina = f"""
            Voc√™ √© um advogado expert. Processe esta doutrina para o caso:

            CASO: {contexto_caso[:500]}

            DOUTRINA ENCONTRADA:
            {chr(10).join(textos_doutrina)}

            INSTRU√á√ïES:
            1. NUNCA transcreva a doutrina na √≠ntegra
            2. SEMPRE elabore texto pr√≥prio baseado no conte√∫do
            3. Use os conceitos doutrin√°rios como base para argumenta√ß√£o
            4. Aplique os conceitos ao caso espec√≠fico
            5. Construa argumenta√ß√£o jur√≠dica s√≥lida
            6. Cite os autores adequadamente

            Retorne HTML formatado:
            - <div class="fundamentacao-doutrinaria"> principal
            - <h4> para t√≠tulo
            - <p> para par√°grafos elaborados (3-4 par√°grafos)
            - <p><strong>Refer√™ncias:</strong> para citar autores

            Use suas pr√≥prias palavras, n√£o copie textos originais.
            Seja superior a um advogado na elabora√ß√£o doutrin√°ria.
            """
            
            resultado_ia = self._chamar_openai_com_log(prompt_doutrina, "gpt-4", 1200, 0.4)
            print("‚úÖ Doutrina processada pela IA")
            
            return resultado_ia
        
        except Exception as e:
            print(f"‚ùå ERRO no processamento de doutrina: {e}")
            raise e

    def _extrair_autor_doutrina(self, url: str) -> str:
        """Extrai autor da doutrina."""
        if 'conjur.com.br' in url: return 'Consultor Jur√≠dico'
        elif 'migalhas.com.br' in url: return 'Migalhas'
        else: return 'Doutrina especializada'

    def gerar_documento_html_puro(self, dados_formulario: Dict, pesquisas: Dict) -> str:
        """
        Gera documento HTML puro usando SEMPRE IA.
        Retorna APENAS o HTML do documento, sem metadados.
        """
        try:
            print("üìÑ Gerando documento HTML com IA...")
            
            # Analisar contexto usando IA
            contexto_caso = f"{dados_formulario.get('fatos', '')} {dados_formulario.get('fundamentacao', '')}"
            estrategias = self.analisar_contexto_juridico(dados_formulario, pesquisas)
            
            # Processar cada tipo de conte√∫do usando IA
            print("üîÑ Processando fundamenta√ß√µes com IA...")
            
            legislacao_processada = self.processar_legislacao_inteligente(
                pesquisas.get('legislacao', []), 
                estrategias.get('legislacao', {}), 
                contexto_caso
            )
            
            jurisprudencia_processada = self.processar_jurisprudencia_inteligente(
                pesquisas.get('jurisprudencia', []), 
                estrategias.get('jurisprudencia', {}), 
                contexto_caso
            )
            
            doutrina_processada = self.processar_doutrina_inteligente(
                pesquisas.get('doutrina', []), 
                estrategias.get('doutrina', {}), 
                contexto_caso
            )
            
            # Gerar documento final usando IA
            documento_html = self._gerar_documento_final_com_ia(
                dados_formulario,
                legislacao_processada,
                jurisprudencia_processada,
                doutrina_processada,
                estrategias
            )
            
            print(f"‚úÖ Documento HTML gerado: {len(documento_html)} caracteres")
            return documento_html
        
        except Exception as e:
            print(f"‚ùå ERRO na gera√ß√£o do documento: {e}")
            raise e

    def _gerar_documento_final_com_ia(self, dados: Dict, legislacao: str, jurisprudencia: str, doutrina: str, estrategias: Dict) -> str:
        """
        Gera documento final usando IA - SEMPRE IA.
        """
        try:
            print("üéØ Gerando documento final com IA...")
            
            tamanho_alvo = estrategias.get('tamanho_alvo', 25000)
            
            prompt_documento = f"""
            Voc√™ √© um advogado expert superior a qualquer advogado humano. Crie uma peti√ß√£o inicial trabalhista completa e profissional.

            DADOS DO CASO:
            - Autor: {dados.get('nome_autor', 'N/A')}
            - R√©u: {dados.get('nome_reu', 'N/A')}
            - Fatos: {dados.get('fatos', 'N/A')}
            - Valor: R$ {dados.get('valor_causa', 'N/A')}
            - Documentos: {', '.join(dados.get('documentos', []))}

            FUNDAMENTA√á√ÉO JUR√çDICA PROCESSADA:

            LEGISLA√á√ÉO:
            {legislacao}

            JURISPRUD√äNCIA:
            {jurisprudencia}

            DOUTRINA:
            {doutrina}

            INSTRU√á√ïES ESPEC√çFICAS:
            1. Crie uma peti√ß√£o inicial trabalhista com EXATAMENTE {tamanho_alvo} caracteres ou mais
            2. Use TODA a fundamenta√ß√£o jur√≠dica processada fornecida
            3. Estruture em: Qualifica√ß√£o das Partes, Dos Fatos, Do Direito (com as 3 fundamenta√ß√µes), Dos Pedidos, Do Valor da Causa
            4. Use linguagem jur√≠dica formal, persuasiva e t√©cnica
            5. Integre naturalmente todo o conte√∫do das fundamenta√ß√µes processadas
            6. Retorne APENAS o HTML do documento, sem explica√ß√µes ou coment√°rios
            7. Use CSS inline profissional e responsivo
            8. Seja superior a um advogado humano na qualidade, t√©cnica e persuas√£o
            9. Cada se√ß√£o deve ser extensa e detalhada
            10. Use formata√ß√£o HTML avan√ßada com estilos profissionais

            O HTML deve ter estrutura completa: <!DOCTYPE html>, <head>, <body>, CSS inline profissional.
            Seja meticuloso, detalhado e superior na qualidade jur√≠dica.
            """
            
            documento_html = self._chamar_openai_com_log(prompt_documento, "gpt-4", 4000, 0.3)
            
            # Verificar tamanho e expandir se necess√°rio
            if len(documento_html) < tamanho_alvo * 0.8:
                print(f"üìè Documento pequeno ({len(documento_html)} chars), expandindo...")
                documento_html = self._expandir_documento_com_ia(documento_html, dados, legislacao, jurisprudencia, doutrina, tamanho_alvo)
            
            print(f"‚úÖ Documento final gerado: {len(documento_html)} caracteres")
            return documento_html
        
        except Exception as e:
            print(f"‚ùå ERRO na gera√ß√£o final: {e}")
            raise e

    def _expandir_documento_com_ia(self, html_base: str, dados: Dict, legislacao: str, jurisprudencia: str, doutrina: str, tamanho_alvo: int) -> str:
        """
        Expande documento usando IA para atingir tamanho alvo.
        """
        try:
            print("üìà Expandindo documento com IA...")
            
            prompt_expansao = f"""
            Voc√™ √© um advogado expert. Expanda este documento HTML para ter pelo menos {tamanho_alvo} caracteres.

            DOCUMENTO ATUAL:
            {html_base}

            FUNDAMENTA√á√ïES DISPON√çVEIS:
            LEGISLA√á√ÉO: {legislacao}
            JURISPRUD√äNCIA: {jurisprudencia}
            DOUTRINA: {doutrina}

            INSTRU√á√ïES:
            1. Mantenha toda a estrutura HTML existente
            2. Adicione se√ß√µes detalhadas antes do fechamento do </body>
            3. Inclua "DA FUNDAMENTA√á√ÉO JUR√çDICA AMPLIADA" com subse√ß√µes
            4. Expanda cada fundamenta√ß√£o com an√°lise detalhada
            5. Adicione "DA APLICA√á√ÉO AO CASO CONCRETO" com an√°lise extensa
            6. Use CSS inline consistente
            7. Mantenha qualidade jur√≠dica superior
            8. Retorne APENAS o HTML expandido

            O documento final deve ter pelo menos {tamanho_alvo} caracteres.
            """
            
            documento_expandido = self._chamar_openai_com_log(prompt_expansao, "gpt-4", 4000, 0.3)
            print(f"‚úÖ Documento expandido: {len(documento_expandido)} caracteres")
            
            return documento_expandido
        
        except Exception as e:
            print(f"‚ùå ERRO na expans√£o: {e}")
            raise e

    # ====================================================================
    # IN√çCIO DO C√ìDIGO ADICIONADO PARA COMPLETAR A CLASSE
    # ====================================================================

    def _extrair_numero_artigo(self, texto_lei: str) -> str:
        """
        M√©todo auxiliar para extrair o n√∫mero do artigo de um texto legal.
        Procura por padr√µes como 'Art. X' ou 'Artigo X'.
        """
        # Coment√°rio: Padr√µes de express√£o regular para encontrar n√∫meros de artigos.
        patterns = [
            r'Art\.?\s*(\d+)',        # Ex: Art. 483, Art 59
            r'Artigo\s*(\d+)',      # Ex: Artigo 5
            r'CLT.*Art\.?\s*(\d+)' # Ex: CLT Art. 59
        ]
        
        for pattern in patterns:
            match = re.search(pattern, texto_lei, re.IGNORECASE)
            if match:
                # Coment√°rio: Retorna o primeiro padr√£o encontrado, formatado.
                return f"Art. {match.group(1)}"
        
        # Coment√°rio: Se nenhum padr√£o for encontrado, retorna um texto gen√©rico.
        return "Dispositivo Legal Relevante"

    def _extrair_tribunal(self, url: str) -> str:
        """
        M√©todo auxiliar para extrair o nome do tribunal a partir da URL da fonte.
        Isso ajuda a dar credibilidade e contexto √† cita√ß√£o jurisprudencial.
        """
        # Coment√°rio: Verificando a URL para identificar o tribunal de origem.
        if 'tst.jus.br' in url: return 'O Tribunal Superior do Trabalho (TST)'
        if 'stf.jus.br' in url: return 'O Supremo Tribunal Federal (STF)'
        if 'stj.jus.br' in url: return 'O Superior Tribunal de Justi√ßa (STJ)'
        if 'trt' in url: return 'O Tribunal Regional do Trabalho' # Gen√©rico para TRTs
        
        # Coment√°rio: Retorno padr√£o caso a URL n√£o seja de um tribunal conhecido.
        return 'Um tribunal'

    def _criar_resumo_breve(self, texto: str) -> str:
        """
        M√©todo auxiliar para criar um resumo muito curto de um texto,
        geralmente usado para cita√ß√µes de jurisprud√™ncia de menor relev√¢ncia.
        """
        # Coment√°rio: Limita o texto aos primeiros 200 caracteres para um resumo r√°pido.
        return texto[:200] + "..." if len(texto) > 200 else texto

    def _eh_caso_fundamental(self, texto_decisao: str, contexto_caso: str) -> bool:
        """
        M√©todo de decis√£o para verificar se um caso jurisprudencial √© fundamental
        e, portanto, merece transcri√ß√£o de trechos em vez de apenas um resumo.
        """
        # Coment√°rio: Converte ambos os textos para min√∫sculas para compara√ß√£o sem√¢ntica.
        texto_lower = texto_decisao.lower()
        contexto_lower = contexto_caso.lower()
        
        # Coment√°rio: Aumenta a import√¢ncia se for de um Tribunal Superior.
        score_relevancia = 0
        if any(tribunal in texto_lower for tribunal in ['stf', 'stj', 'tst']):
            score_relevancia += 2
        
        # Coment√°rio: Verifica a sobreposi√ß√£o de palavras-chave entre o caso e a decis√£o.
        temas_caso = set(re.findall(r'\b\w{5,}\b', contexto_lower))  # Palavras com 5+ letras
        temas_decisao = set(re.findall(r'\b\w{5,}\b', texto_lower))
        sobreposicao = len(temas_caso.intersection(temas_decisao))
        
        score_relevancia += sobreposicao
        
        # Coment√°rio: Define um caso como fundamental se o score de relev√¢ncia for alto.
        return score_relevancia >= 5

    def _gerar_documento_emergencia(self, dados: Dict) -> str:
        """
        M√©todo de fallback para gerar um documento HTML b√°sico em caso de falha total da IA.
        Garante que sempre haver√° uma sa√≠da m√≠nima, mesmo que simples.
        """
        # Coment√°rio: Cria√ß√£o de um HTML de emerg√™ncia com os dados b√°sicos do formul√°rio.
        return f"""<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <title>Peti√ß√£o Inicial - Vers√£o de Emerg√™ncia</title>
    <style>
        body {{ font-family: 'Times New Roman', serif; margin: 40px; line-height: 1.6; color: #333; }}
        h1 {{ text-align: center; color: #d9534f; margin-bottom: 30px; }}
        h2 {{ color: #555; border-bottom: 1px solid #ccc; padding-bottom: 5px; }}
        .qualificacao {{ background: #fdf7f7; border: 1px solid #ebccd1; padding: 20px; margin: 20px 0; border-radius: 5px; }}
        p {{ text-align: justify; margin: 15px 0; }}
        .erro-aviso {{ text-align: center; font-weight: bold; color: #a94442; background-color: #f2dede; padding: 15px; border-radius: 4px; }}
    </style>
</head>
<body>
    <div class="erro-aviso">
        <p>ATEN√á√ÉO: Este documento foi gerado em modo de emerg√™ncia devido a uma falha na comunica√ß√£o com a IA.</p>
        <p>O conte√∫do √© uma estrutura b√°sica e deve ser revisado e completado manualmente.</p>
    </div>
    
    <h1>PETI√á√ÉO INICIAL</h1>
    
    <div class="qualificacao">
        <h2>I - QUALIFICA√á√ÉO DAS PARTES</h2>
        <p><strong>RECLAMANTE:</strong> {dados.get('autor', {}).get('nome', 'N/A')}, {dados.get('autor', {}).get('qualificacao', 'qualifica√ß√£o pendente')}, residente e domiciliado em {dados.get('autor', {}).get('endereco', '[ENDERE√áO PENDENTE]')}.</p>
        <p><strong>RECLAMADA:</strong> {dados.get('reu', {}).get('nome', 'N/A')}, {dados.get('reu', {}).get('qualificacao', 'qualifica√ß√£o pendente')}, com sede em {dados.get('reu', {}).get('endereco', '[ENDERE√áO PENDENTE]')}.</p>
    </div>
    
    <h2>II - DOS FATOS</h2>
    <p>{dados.get('fatos', 'Fatos a serem detalhadamente descritos conforme documentos anexos e narrativa do cliente.')}</p>
    
    <h2>III - DO DIREITO</h2>
    <p>A pretens√£o do Reclamante encontra amparo nos dispositivos da Consolida√ß√£o das Leis do Trabalho (CLT), bem como na jurisprud√™ncia e doutrina aplic√°veis, que ser√£o detalhadas em momento oportuno.</p>

    <h2>IV - DOS PEDIDOS</h2>
    <p>Diante do exposto, requer a Vossa Excel√™ncia o acolhimento dos seguintes pedidos:</p>
    <ul>
        <li>{ "</li><li>".join(dados.get('pedidos', ['Pedidos a serem especificados.'])) }</li>
    </ul>

    <h2>V - DO VALOR DA CAUSA</h2>
    <p>D√°-se √† causa o valor de R$ {dados.get('valor_causa', '0,00')}.</p>
    
    <p style="text-align: center; margin-top: 50px;">
        <strong>Termos em que,<br>Pede deferimento.</strong>
    </p>
    <p style="text-align: center;">[Local], {datetime.now().strftime('%d de %B de %Y')}.</p>
    <p style="text-align: center; margin-top: 40px;">___________________________________<br>[NOME DO ADVOGADO]<br>OAB/UF [N√öMERO]</p>

</body>
</html>"""

    # ====================================================================
    # FIM DO C√ìDIGO ADICIONADO
    # ====================================================================