# agente_redator_contratos.py - Vers√£o 5.0 (Com L√≥gica de Cl√°usulas Condicionais)

import json
import logging
import asyncio
import openai
import os
from typing import Dict, Any, List, Optional
import re
from datetime import datetime

class AgenteRedatorContratos:
    """
    Agente Redator Otimizado e Especializado na reda√ß√£o de Contratos.
    v5.0: Utiliza l√≥gica condicional para incluir cl√°usulas de Propriedade Intelectual
    e Confidencialidade apenas quando s√£o relevantes para o tipo de contrato.
    """
    def __init__(self, api_key: str):
        if not api_key: raise ValueError("DEEPSEEK_API_KEY n√£o configurada")
        self.client = openai.OpenAI(api_key=api_key, base_url="https://api.deepseek.com/v1")
        print("‚úÖ Agente Redator de CONTRATOS (Din√¢mico v5.0) inicializado.")

    async def _chamar_api_async(self, prompt: str, secao_nome: str) -> str:
        """Chama a API de forma ass√≠ncrona para gerar uma se√ß√£o espec√≠fica do contrato."""
        print(f"üìù Gerando/Melhorando cl√°usula: {secao_nome}")
        try:
            response = await asyncio.to_thread(
                self.client.chat.completions.create,
                model="deepseek-chat",
                messages=[{"role": "user", "content": prompt}],
                max_tokens=8192,
                temperature=0.2
            )
            return re.sub(r'^```html|```$', '', response.choices[0].message.content.strip())
        except Exception as e:
            print(f"‚ùå ERRO na API para a cl√°usula {secao_nome}: {e}")
            return f"<h3>ERRO AO GERAR CL√ÅUSULA - {secao_nome.upper()}</h3><p>Detalhes: {e}</p>"

    async def gerar_documento_html_puro_async(self, dados_formulario: Dict, pesquisas: Dict, documento_anterior: Optional[str] = None, recomendacoes: Optional[List[str]] = None) -> str:
        """Cria ou melhora as cl√°usulas do documento em paralelo."""
        
        print("--- DADOS RECEBIDOS PELO AGENTE REDATOR DE CONTRATOS ---")
        print(json.dumps(dados_formulario, indent=2, ensure_ascii=False))
        print("----------------------------------------------------")

        instrucao_formato = "Sua resposta DEVE ser um bloco de c√≥digo HTML. Use <h3> para o t√≠tulo da cl√°usula (ex: '<h3>CL√ÅUSULA PRIMEIRA - DO OBJETO</h3>'), <p> para o texto, e <strong> para negrito. N√ÉO use Markdown (`**`). Seja extremamente detalhado e formal."
        instrucao_fidelidade = "ATEN√á√ÉO: Sua tarefa √© redigir uma cl√°usula de contrato. Voc√™ DEVE se basear ESTRITAMENTE nos dados fornecidos. N√ÉO invente informa√ß√µes. Sua tarefa √© usar os dados fornecidos para redigir a cl√°usula de forma detalhada e juridicamente s√≥lida."
        
        instrucao_melhoria = ""
        if recomendacoes:
            instrucao_melhoria = f"\n\nINSTRU√á√ïES PARA MELHORIA: A vers√£o anterior foi considerada insatisfat√≥ria. Reescreva e expanda o conte√∫do para atender a seguinte recomenda√ß√£o: '{' '.join(recomendacoes)}'."

        tipo_contrato = dados_formulario.get('tipo_contrato_especifico', 'DE PRESTA√á√ÉO DE SERVI√áOS')
        pesquisa_formatada = pesquisas.get('pesquisa_formatada', 'Nenhuma pesquisa de refer√™ncia foi encontrada.')

        # COMENT√ÅRIO: Os prompts s√£o definidos em um dicion√°rio base.
        prompts = {
            "objeto": f"{instrucao_formato}\n{instrucao_fidelidade}{instrucao_melhoria}\n\nPara um '{tipo_contrato}', redija a 'CL√ÅUSULA PRIMEIRA - DO OBJETO', detalhando o seguinte: {dados_formulario.get('objeto', '')}\n\nUse a seguinte pesquisa como refer√™ncia:\n{pesquisa_formatada}",
            "valor": f"{instrucao_formato}\n{instrucao_fidelidade}{instrucao_melhoria}\n\nPara um '{tipo_contrato}', redija a 'CL√ÅUSULA SEGUNDA - DO VALOR E DA FORMA DE PAGAMENTO', detalhando o valor de '{dados_formulario.get('valor', '')}' e a forma de pagamento: '{dados_formulario.get('pagamento', '')}'",
            "prazos": f"{instrucao_formato}\n{instrucao_fidelidade}{instrucao_melhoria}\n\nPara um '{tipo_contrato}', redija a 'CL√ÅUSULA TERCEIRA - DOS PRAZOS', detalhando os seguintes prazos: '{dados_formulario.get('prazos', '')}'",
            "obrigacoes": f"{instrucao_formato}\n{instrucao_fidelidade}{instrucao_melhoria}\n\nPara um '{tipo_contrato}', redija a 'CL√ÅUSULA QUARTA - DAS OBRIGA√á√ïES DAS PARTES', detalhando as seguintes responsabilidades: '{dados_formulario.get('responsabilidades', '')}'. Crie subt√≠tulos com '<strong>Obriga√ß√µes do CONTRATANTE:</strong>' e '<strong>Obriga√ß√µes do CONTRATADO:</strong>'.",
            "penalidades": f"{instrucao_formato}\n{instrucao_fidelidade}{instrucao_melhoria}\n\nPara um '{tipo_contrato}', redija a 'CL√ÅUSULA QUINTA - DAS PENALIDADES', detalhando as seguintes penalidades: '{dados_formulario.get('penalidades', '')}'",
            "rescisao": f"{instrucao_formato}\n{instrucao_fidelidade}{instrucao_melhoria}\n\nPara um '{tipo_contrato}', redija a 'CL√ÅUSULA OITAVA - DA RESCIS√ÉO', detalhando as condi√ß√µes e consequ√™ncias da rescis√£o.",
            "foro": f"{instrucao_formato}\n{instrucao_fidelidade}{instrucao_melhoria}\n\nRedija a 'CL√ÅUSULA NONA - DO FORO', especificando o foro de elei√ß√£o como: '{dados_formulario.get('foro', '')}'",
        }

        # COMENT√ÅRIO: L√≥gica condicional. As cl√°usulas de Propriedade Intelectual e Confidencialidade
        # s√≥ s√£o adicionadas se o tipo de contrato for um dos que tipicamente as exigem.
        contratos_com_pi_e_sigilo = ["presta√ß√£o de servi√ßos", "desenvolvimento de software", "franquia", "cria√ß√£o"]
        if any(termo in tipo_contrato.lower() for termo in contratos_com_pi_e_sigilo):
            print("  -> Tipo de contrato requer cl√°usulas de PI e Confidencialidade.")
            prompts["propriedade"] = f"{instrucao_formato}\n{instrucao_fidelidade}{instrucao_melhoria}\n\nPara um '{tipo_contrato}', redija a 'CL√ÅUSULA SEXTA - DA PROPRIEDADE INTELECTUAL', criando uma cl√°usula padr√£o que defina a quem pertence a propriedade intelectual do trabalho desenvolvido."
            prompts["confidencialidade"] = f"{instrucao_formato}\n{instrucao_fidelidade}{instrucao_melhoria}\n\nRedija a 'CL√ÅUSULA S√âTIMA - DA CONFIDENCIALIDADE', criando uma cl√°usula padr√£o que obrigue as partes a manter sigilo."
        else:
            print("  -> Tipo de contrato simples. Cl√°usulas de PI e Confidencialidade n√£o ser√£o geradas.")

        tasks = [self._chamar_api_async(p, n) for n, p in prompts.items()]
        resultados = await asyncio.gather(*tasks)
        
        clausulas_html = "\n".join(resultados)

        contratante = dados_formulario.get('contratante', {})
        contratado = dados_formulario.get('contratado', {})
        
        # COMENT√ÅRIO: O template de qualifica√ß√£o foi ajustado para lidar com pessoa f√≠sica (CPF/RG) ou jur√≠dica (CNPJ).
        qualificacao_contratante = f"<p><strong>CONTRATANTE:</strong> {contratante.get('nome', '')}, { 'pessoa f√≠sica, portadora do CPF n¬∫ ' + contratante.get('cpf', '') + ' e do RG n¬∫ ' + contratante.get('rg', '') if contratante.get('cpf') else 'pessoa jur√≠dica de direito privado, inscrita no CNPJ sob o n¬∫ ' + contratante.get('cnpj', '')}, com sede em {contratante.get('endereco', '')}.</p>"
        qualificacao_contratado = f"<p><strong>CONTRATADO:</strong> {contratado.get('nome', '')}, { 'pessoa f√≠sica, portadora do CPF n¬∫ ' + contratado.get('cpf', '') + ' e do RG n¬∫ ' + contratado.get('rg', '') if contratado.get('cpf') else 'pessoa jur√≠dica de direito privado, inscrita no CNPJ sob o n¬∫ ' + contratado.get('cnpj', '')}, com sede em {contratado.get('endereco', '')}.</p>"


        return f"""
<!DOCTYPE html><html lang="pt-BR"><head><title>{tipo_contrato.title()}</title><style>body{{font-family:'Times New Roman',serif;line-height:1.6;text-align:justify;margin:3cm}}h1{{text-align:center;font-size:16pt;margin-bottom:2cm;}}h2{{font-size:14pt;margin-top:1.5cm;font-weight:bold;text-align:center;}}h3{{font-size:12pt;margin-top:1cm;font-weight:bold;}}p{{text-indent:2em;margin-bottom:15px}}</style></head>
<body>
    <h1>{tipo_contrato.upper()}</h1>
    <h2>DAS PARTES</h2>
    {qualificacao_contratante}
    {qualificacao_contratado}
    <p>As partes acima identificadas t√™m, entre si, justo e acertado o presente Contrato, que se reger√° pelas cl√°usulas seguintes e pelas condi√ß√µes descritas no presente.</p>
    {clausulas_html}
    <p>E, por estarem assim justos e contratados, firmam o presente instrumento, em duas vias de igual teor e forma, na presen√ßa de duas testemunhas.</p>
    <p style="text-align:center;margin-top:2cm;margin-bottom:0;">[Local], {datetime.now().strftime('%d de August de %Y')}.</p>
    <p style="text-align:center;margin-top:2cm;margin-bottom:1cm;">_________________________________________<br><strong>{contratante.get('nome', '').upper()}</strong><br>Contratante</p>
    <p style="text-align:center;margin-bottom:2cm;">_________________________________________<br><strong>{contratado.get('nome', '').upper()}</strong><br>Contratado</p>
    <p style="text-align:center;margin-bottom:1cm;">_________________________________________<br>Testemunha 1</p>
    <p style="text-align:center;">_________________________________________<br>Testemunha 2</p>
</body></html>
        """

    def redigir_peticao_completa(self, dados_estruturados: Dict, pesquisa_juridica: Dict, documento_anterior: Optional[str] = None, recomendacoes: Optional[List[str]] = None) -> Dict:
        """Ponto de entrada s√≠ncrono que executa a l√≥gica ass√≠ncrona, passando o feedback se existir."""
        try:
            documento_html = asyncio.run(self.gerar_documento_html_puro_async(dados_estruturados, pesquisa_juridica, documento_anterior, recomendacoes))
            return {"documento_html": documento_html}
        except Exception as e:
            return {"status": "erro", "erro": str(e)}
