# agente_pesquisador_jurisprudencia.py - v3.6 (Com L√≥gica Anti-Insist√™ncia)

import asyncio
import aiohttp
import re
import openai
import os
from datetime import datetime
from typing import Dict, Any, List
from googlesearch import search
from bs4 import BeautifulSoup
from urllib.parse import urlparse

class AgentePesquisadorJurisprudencia:
    """
    Agente Especializado em Pesquisa de Jurisprud√™ncia.
    v3.6: Implementa uma l√≥gica "anti-insist√™ncia" para evitar perder tempo
    com dom√≠nios que est√£o a bloquear o acesso.
    """
    def __init__(self, api_key: str = None):
        print("‚öñÔ∏è  Inicializando Agente de Pesquisa de JURISPRUD√äNCIA (v3.6)...")
        
        if not api_key:
            api_key = os.getenv('DEEPSEEK_API_KEY')
        
        if not api_key:
            raise ValueError("A chave da API da DeepSeek √© necess√°ria para o filtro de relev√¢ncia e n√£o foi encontrada.")
        
        self.client = openai.OpenAI(api_key=api_key, base_url="https://api.deepseek.com/v1")
        
        self.headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
        }
        self.config = {
            'tamanho_minimo_conteudo': 500,
            'min_sucessos_por_termo': 10,
            'search_results_per_request': 25,
            'max_falhas_por_dominio': 3, # COMENT√ÅRIO: Nova regra de "3 strikes".
        }
        self.sites_prioritarios = ['conjur.com.br', 'migalhas.com.br', 'stj.jus.br', 'stf.jus.br', 'tst.jus.br', 'ambito-juridico.com.br']
        print("‚úÖ Sistema de pesquisa de JURISPRUD√äNCIA inicializado.")

    async def _validar_relevancia_com_ia_async(self, texto: str, termo_pesquisa: str) -> bool:
        # ... (c√≥digo de valida√ß√£o com IA permanece o mesmo)
        try:
            prompt = f"""
            Analise o seguinte texto e determine se ele √© uma JURISPRUD√äNCIA (decis√£o judicial, ac√≥rd√£o, ementa) relevante para o termo de pesquisa "{termo_pesquisa}".
            Responda APENAS com "SIM" se for uma jurisprud√™ncia relevante, ou "N√ÉO" caso contr√°rio.

            TEXTO PARA AN√ÅLISE:
            ---
            {texto[:2000]}
            ---
            """
            response = await asyncio.to_thread(
                self.client.chat.completions.create,
                model="deepseek-chat",
                messages=[{"role": "user", "content": prompt}],
                max_tokens=10,
                temperature=0.0
            )
            resposta = response.choices[0].message.content.strip().upper()
            return "SIM" in resposta
        except Exception as e:
            print(f"‚ö†Ô∏è Erro na valida√ß√£o com IA: {e}")
            return False

    async def _extrair_e_validar_async(self, session, url: str, termo_pesquisa: str) -> Dict[str, Any]:
        # ... (c√≥digo de extra√ß√£o permanece o mesmo)
        print(f"‚Üí Tentando extrair de: {url}")
        try:
            async with session.get(url, headers=self.headers, timeout=15, ssl=False) as response:
                if response.status == 200:
                    raw_html = await response.read()
                    html = raw_html.decode('utf-8', errors='ignore')
                    soup = BeautifulSoup(html, 'html.parser')
                    for tag in soup.find_all(['script', 'style', 'nav', 'footer', 'header', 'aside']):
                        tag.decompose()
                    
                    texto = soup.body.get_text(separator=' ', strip=True) if soup.body else ""
                    texto_limpo = re.sub(r'\s+', ' ', texto).strip()
                    
                    if len(texto_limpo) < self.config['tamanho_minimo_conteudo']:
                        print(f"‚ö†Ô∏è Descartado (curto): {url}")
                        return None

                    print(f"  -> Validando relev√¢ncia do conte√∫do com IA...")
                    if await self._validar_relevancia_com_ia_async(texto_limpo, termo_pesquisa):
                        print(f"‚úî SUCESSO (IA APROVOU): Conte√∫do extra√≠do de {url} ({len(texto_limpo)} caracteres)")
                        return { "url": url, "texto": texto_limpo, "titulo": soup.title.string.strip() if soup.title else "N/A" }
                    else:
                        print(f"‚ö†Ô∏è Descartado (IA Reprovou como irrelevante): {url}")
                        return None
                else:
                    print(f"‚ùå Falha (Status {response.status}): {url}")
                    return None
        except Exception as e:
            print(f"‚ùå Falha (Erro: {type(e).__name__}): {url}")
            return None

    async def _pesquisar_termo_async(self, termo: str) -> List[Dict[str, Any]]:
        """Busca um √∫nico termo e extrai o conte√∫do at√© atingir a meta, evitando dom√≠nios com falhas repetidas."""
        print(f"\nüìö Buscando jurisprud√™ncia para o termo: '{termo}'...")
        site_query = " OR ".join([f"site:{site}" for site in self.sites_prioritarios])
        query = f'jurisprud√™ncia ementa ac√≥rd√£o sobre "{termo}" {site_query}'
        
        resultados_sucesso = []
        # COMENT√ÅRIO: Novo dicion√°rio para registar as falhas por dom√≠nio.
        falhas_por_dominio = {}
        
        try:
            loop = asyncio.get_event_loop()
            urls_encontradas = await loop.run_in_executor(None, lambda: list(search(query, num_results=self.config['search_results_per_request'], lang="pt")))
            
            async with aiohttp.ClientSession() as session:
                for url in urls_encontradas:
                    if len(resultados_sucesso) >= self.config['min_sucessos_por_termo']:
                        break
                    
                    dominio = urlparse(url).netloc
                    
                    # COMENT√ÅRIO: Nova l√≥gica "anti-insist√™ncia".
                    # Se o dom√≠nio j√° falhou 3 vezes, ele √© ignorado.
                    if falhas_por_dominio.get(dominio, 0) >= self.config['max_falhas_por_dominio']:
                        print(f"üö´ Ignorando {url} (dom√≠nio {dominio} com falhas repetidas).")
                        continue

                    resultado = await self._extrair_e_validar_async(session, url, termo)
                    if resultado:
                        resultados_sucesso.append(resultado)
                    else:
                        # Se a extra√ß√£o falhou, regista a falha para este dom√≠nio.
                        falhas_por_dominio[dominio] = falhas_por_dominio.get(dominio, 0) + 1
            
            print(f"üéØ Pesquisa para '{termo}' conclu√≠da com {len(resultados_sucesso)} extra√ß√µes bem-sucedidas.")
            return resultados_sucesso
        except Exception as e:
            print(f"‚ö†Ô∏è Falha cr√≠tica na busca para '{termo}': {e}")
            return resultados_sucesso

    async def pesquisar_jurisprudencia_async(self, termos: List[str]) -> List[Dict[str, Any]]:
        """Cria e executa todas as tarefas de pesquisa em paralelo."""
        tasks = [self._pesquisar_termo_async(termo) for termo in termos]
        resultados_por_termo = await asyncio.gather(*tasks)
        
        todos_os_resultados = [item for sublist in resultados_por_termo for item in sublist]
        return todos_os_resultados

    def pesquisar(self, termos: List[str]) -> List[Dict[str, Any]]:
        """Ponto de entrada s√≠ncrono que executa a l√≥gica ass√≠ncrona."""
        inicio_pesquisa = datetime.now()
        try:
            resultado = asyncio.run(self.pesquisar_jurisprudencia_async(termos))
        except Exception as e:
            print(f"‚ùå Erro cr√≠tico durante a pesquisa de jurisprud√™ncia: {e}")
            return []
        
        tempo_total = (datetime.now() - inicio_pesquisa).total_seconds()
        print(f"\n--- RESUMO DA PESQUISA DE JURISPRUD√äNCIA ---")
        print(f"‚úÖ Total de {len(resultado)} conte√∫dos relevantes encontrados.")
        print(f"‚úÖ PESQUISA CONCLU√çDA em {tempo_total:.1f} segundos\n")
        return resultado
