# agente_redator_estudo_de_caso.py - Agente Especializado em Estudos de Caso Jur√≠dicos

import json
import logging
import asyncio
import openai
import os
from typing import Dict, Any, List, Optional
import re
from datetime import datetime

class AgenteRedatorEstudoDeCaso:
    """
    Agente Redator Otimizado e Especializado na reda√ß√£o de Estudos de Caso Jur√≠dicos.
    - Utiliza prompts modulares e ass√≠ncronos para cada se√ß√£o.
    - Aceita feedback do Agente Validador para melhorar rascunhos.
    - Tem uma meta de gera√ß√£o de conte√∫do de 30.000 caracteres.
    """
    def __init__(self, api_key: str):
        if not api_key: raise ValueError("DEEPSEEK_API_KEY n√£o configurada")
        self.client = openai.OpenAI(api_key=api_key, base_url="https://api.deepseek.com/v1")
        print("‚úÖ Agente Redator de ESTUDO DE CASO inicializado.")

    async def _chamar_api_async(self, prompt: str, secao_nome: str) -> str:
        """Chama a API de forma ass√≠ncrona para gerar uma se√ß√£o espec√≠fica."""
        print(f"üìù Gerando/Melhorando se√ß√£o de Estudo de Caso: {secao_nome}")
        try:
            response = await asyncio.to_thread(
                self.client.chat.completions.create,
                model="deepseek-chat",
                messages=[{"role": "user", "content": prompt}],
                max_tokens=8192,
                temperature=0.3
            )
            return re.sub(r'^```html|```$', '', response.choices[0].message.content.strip())
        except Exception as e:
            print(f"‚ùå ERRO na API para a se√ß√£o {secao_nome}: {e}")
            return f"<h2>Erro ao Gerar Se√ß√£o: {secao_nome}</h2><p>{e}</p>"

    async def gerar_documento_html_puro_async(self, dados_formulario: Dict, pesquisas: Dict, documento_anterior: Optional[str] = None, recomendacoes: Optional[List[str]] = None) -> str:
        """Cria ou melhora as se√ß√µes do documento em paralelo."""
        
        instrucao_formato = "Sua resposta DEVE ser um bloco de c√≥digo HTML bem formatado. N√ÉO use Markdown (como `**` ou `*`). Para √™nfase, use apenas tags HTML como `<strong>` para negrito."

        instrucao_melhoria = ""
        if recomendacoes:
            instrucao_melhoria = f"\n\nINSTRU√á√ïES PARA MELHORIA: A vers√£o anterior foi considerada insatisfat√≥ria. Reescreva e expanda significativamente o conte√∫do para atender a seguinte recomenda√ß√£o: '{' '.join(recomendacoes)}'. Use o rascunho anterior como refer√™ncia do que N√ÉO fazer.\nRASCUNHO ANTERIOR:\n{documento_anterior}"

        # Prompts modulares com requisitos de tamanho para atingir a meta de 30k.
        prompts = {
            "ementa": f"{instrucao_formato}{instrucao_melhoria}\n\nRedija a 'EMENTA' de um estudo de caso jur√≠dico. Crie um resumo conciso em 3 a 5 t√≥picos. DADOS: {json.dumps(dados_formulario, ensure_ascii=False)}. Comece com <h3>EMENTA</h3>.",
            "relatorio": f"{instrucao_formato}{instrucao_melhoria}\n\nRedija a se√ß√£o 'I - RELAT√ìRIO' de um estudo de caso. Seja extremamente detalhado, com no m√≠nimo 10.000 caracteres. Descreva a consulta e os fatos do caso. DADOS: {json.dumps(dados_formulario, ensure_ascii=False)}. Comece com <h2>I - RELAT√ìRIO</h2>.",
            "analise": f"{instrucao_formato}{instrucao_melhoria}\n\nRedija a se√ß√£o 'II - AN√ÅLISE DO CASO' de um estudo de caso. Seja detalhado, com no m√≠nimo 15.000 caracteres. Analise a quest√£o com base na legisla√ß√£o e jurisprud√™ncia pesquisadas. CONTEXTO: {json.dumps(dados_formulario, ensure_ascii=False)}. PESQUISA: {pesquisas.get('pesquisa_formatada', 'N/A')}. Comece com <h2>II - AN√ÅLISE DO CASO</h2>.",
            "conclusao": f"{instrucao_formato}{instrucao_melhoria}\n\nRedija a se√ß√£o 'III - CONCLUS√ÉO' de um estudo de caso. Seja detalhado, com no m√≠nimo 5.000 caracteres. Responda objetivamente √† consulta com base na an√°lise. CONTEXTO: {json.dumps(dados_formulario, ensure_ascii=False)}. Comece com <h2>III - CONCLUS√ÉO</h2>."
        }
        
        tasks = [self._chamar_api_async(p, n) for n, p in prompts.items()]
        secao_ementa, secao_relatorio, secao_analise, secao_conclusao = await asyncio.gather(*tasks)
        
        documento_html = f"{secao_ementa}{secao_relatorio}{secao_analise}{secao_conclusao}"
        
        # Template HTML final para o Estudo de Caso
        return f"""
<!DOCTYPE html><html lang="pt-BR"><head><title>Estudo de Caso Jur√≠dico</title><style>body{{font-family:'Times New Roman',serif;line-height:1.6;text-align:justify;margin:3cm}}h1,h2,h3{{text-align:center;font-weight:bold}}h1{{font-size:16pt}}h2{{font-size:14pt;margin-top:30px;text-align:left;}}h3{{font-size:12pt;margin-top:20px;text-align:left;font-style:italic;}}p{{text-indent:2em;margin-bottom:15px}}</style></head>
<body>
    <h1>ESTUDO DE CASO</h1>
    <p><strong>Para:</strong> {dados_formulario.get('solicitante', '[Solicitante n√£o informado]')}</p>
    <p><strong>Assunto:</strong> {dados_formulario.get('assunto', '[Assunto n√£o informado]')}</p>
    <p><strong>Data:</strong> {datetime.now().strftime('%d de %B de %Y')}</p>
    <hr>
    {documento_html}
</body></html>
        """

    def redigir_peticao_completa(self, dados_estruturados: Dict, pesquisa_juridica: Dict, documento_anterior: Optional[str] = None, recomendacoes: Optional[List[str]] = None) -> Dict:
        """Ponto de entrada s√≠ncrono que executa a l√≥gica ass√≠ncrona, passando o feedback se existir."""
        try:
            documento_html = asyncio.run(self.gerar_documento_html_puro_async(dados_estruturados, pesquisa_juridica, documento_anterior, recomendacoes))
            return {"documento_html": documento_html}
        except Exception as e:
            return {"status": "erro", "erro": str(e)}