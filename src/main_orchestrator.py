# main_orchestrator.py - VERS√ÉO CORRIGIDA E UNIFICADA

import os
import json
import sys

# Importa os agentes especialistas e de suporte
from agente_coletor_dados import AgenteColetorDados
from agente_validacao import AgenteValidador
from agente_formatacao_final import AgenteFormatacaoFinal
from agente_tecnico_peticao import AgenteTecnicoPeticao # Exemplo, voc√™ ter√° um para cada tipo
from agente_redator_peticao import AgenteRedatorPeticao   # Exemplo
# ... (importe todos os 8 agentes especialistas aqui) ...

class Orquestrador:
    def __init__(self, openai_api_key):
        print("üöÄ Inicializando Orquestrador com agentes especializados...")
        # Instancia todos os seus agentes aqui, como no seu c√≥digo original
        self.coletor = AgenteColetorDados(llm_api_key=openai_api_key)
        self.validador = AgenteValidador(llm_api_key=openai_api_key)
        self.formatador = AgenteFormatacaoFinal()
        self.tecnico_peticao = AgenteTecnicoPeticao(llm_api_key=openai_api_key)
        self.redator_peticao = AgenteRedatorPeticao(llm_api_key=openai_api_key)
        # ... (o resto das suas instancia√ß√µes) ...
        print("‚úÖ Todos os agentes inicializados com sucesso!")

    def gerar_documento(self, raw_input_data: dict) -> dict:
        print("\nüöÄ Iniciando gera√ß√£o de documento com fluxo corrigido")
        print("=" * 60)
        try:
            # 1. Coleta
            print("üì• ETAPA 1: Coleta de dados...")
            dados_processados = self.coletor.coletar_e_processar(raw_input_data)
            if dados_processados.get("erro"):
                return {"status": "erro", "mensagem": "Falha na coleta de dados", "detalhes": dados_processados}
            print("‚úÖ Dados coletados com sucesso.")
            
            # 2. Roteamento
            print("\nüéØ ETAPA 2: Roteamento para especialistas...")
            tipo_documento = dados_processados.get("tipo_documento", "").lower().strip()
            # A sua l√≥gica de roteamento aqui estava correta e foi mantida
            if tipo_documento == "peticao":
                agente_tecnico = self.tecnico_peticao
                agente_redator = self.redator_peticao
                print("üìÑ Roteado para especialistas em PETI√á√ÉO")
            # ... (seus outros elifs para contrato, parecer, etc.)
            else:
                 return {"status": "erro", "mensagem": f"Tipo de documento '{tipo_documento}' n√£o suportado."}

            # --- CORRE√á√ÉO: Chamada dos M√©todos com Nomes Corretos ---
            
            # 3. An√°lise T√©cnica
            print("\nüß† ETAPA 3: An√°lise t√©cnica...")
            # Verifica se o m√©todo correto existe antes de chamar
            if hasattr(agente_tecnico, 'analisar_com_rag'):
                analise_tecnica = agente_tecnico.analisar_com_rag(dados_processados)
            else:
                # Fallback para um m√©todo padr√£o se o espec√≠fico n√£o existir
                analise_tecnica = {"analise": "M√©todo 'analisar_com_rag' n√£o encontrado no agente t√©cnico."}
            
            if analise_tecnica.get("erro"):
                return {"status": "erro", "mensagem": "Falha na an√°lise t√©cnica", "detalhes": analise_tecnica}
            print("‚úÖ An√°lise t√©cnica conclu√≠da.")

            # 4. Reda√ß√£o
            print("\n‚úçÔ∏è ETAPA 4: Reda√ß√£o do documento...")
            # Verifica se o m√©todo correto existe
            if hasattr(agente_redator, 'redigir_com_rag'):
                documento_redigido = agente_redator.redigir_com_rag(dados_processados, analise_tecnica)
            else:
                documento_redigido = "ERRO: M√©todo 'redigir_com_rag' n√£o encontrado no agente redator."

            if isinstance(documento_redigido, dict) and documento_redigido.get("erro"):
                 return {"status": "erro", "mensagem": "Falha na reda√ß√£o", "detalhes": documento_redigido}
            print("‚úÖ Reda√ß√£o conclu√≠da.")

            # 5. Valida√ß√£o e Formata√ß√£o Final (seu c√≥digo aqui estava bom)
            print("\n‚úÖ ETAPA 5: Valida√ß√£o...")
            resultado_validacao = self.validador.validar_documento(documento_redigido, dados_processados)
            # A l√≥gica de loop de revis√£o pode ser adicionada aqui...
            
            print("\nüé® ETAPA 6: Formata√ß√£o final...")
            documento_final_html = self.formatador.formatar_documento(resultado_validacao.get('documento_corrigido', documento_redigido), dados_processados)
            
            print("\nüéâ DOCUMENTO GERADO COM SUCESSO!")
            return {"status": "sucesso", "documento_html": documento_final_html}

        except Exception as e:
            print(f"\n‚ùå ERRO CR√çTICO NO ORQUESTRADOR: {e}")
            return {"status": "erro", "mensagem": f"Erro cr√≠tico na orquestra√ß√£o: {str(e)}"}