# agente_validador.py - Vers√£o 2.2 com L√≥gica de Aprova√ß√£o de 80%

import re
from typing import Dict, Any, List
from datetime import datetime

class AgenteValidador:
    """
    Agente Validador v2.2 que:
    - Analisa a qualidade do documento.
    - Aprova documentos que atingem 80% da meta de tamanho.
    - Gera recomenda√ß√µes claras para o Agente Redator em caso de reprova√ß√£o.
    - Fornece logs detalhados sobre o tamanho do documento.
    """
    
    def __init__(self):
        print("‚úÖ Inicializando Agente Validador v2.2 (com Feedback)...")
        self.criterios_validacao = {
            'tamanho_minimo': 30000, # Meta de 30k
        }
        print("‚úÖ Agente Validador inicializado")
    
    def validar_e_formatar(self, documento_html: str, dados_originais: Dict[str, Any] = None) -> Dict[str, Any]:
        """
        Valida o documento e retorna um status e recomenda√ß√µes.
        """
        try:
            print("üîç Iniciando valida√ß√£o de qualidade...")
            if not isinstance(documento_html, str): documento_html = ""
            
            analise = self._analisar_documento(documento_html)
            
            # COMENT√ÅRIO: Adicionado log para informar o tamanho do documento.
            print(f"   -> Tamanho do Documento: {analise['tamanho']} caracteres (Meta: {self.criterios_validacao['tamanho_minimo']})")
            
            problemas, recomendacoes = self._identificar_problemas_e_recomendar(analise)
            
            # COMENT√ÅRIO: A l√≥gica de aprova√ß√£o foi ajustada para 80%.
            # Se n√£o houver problemas (ou seja, se o tamanho for >= 80% da meta), o status √© 'aprovado'.
            status = "reprovado" if problemas else "aprovado"
            
            print(f"üìä Status da Valida√ß√£o: {status.upper()}")
            if recomendacoes:
                print(f"üìã Recomenda√ß√µes: {', '.join(recomendacoes)}")

            return {
                "status": status,
                "documento_validado": documento_html,
                "recomendacoes": recomendacoes,
                "score_qualidade": self._calcular_score_qualidade(documento_html),
                "timestamp": datetime.now().isoformat()
            }
            
        except Exception as e:
            print(f"‚ùå Erro na valida√ß√£o: {e}")
            return {"status": "erro", "erro": str(e)}
    
    def _analisar_documento(self, documento: str) -> Dict[str, Any]:
        """Analisa as m√©tricas do documento."""
        return {'tamanho': len(documento)}

    def _identificar_problemas_e_recomendar(self, analise: Dict[str, Any]) -> (List[Dict], List[str]):
        """Identifica problemas e gera recomenda√ß√µes textuais para a IA."""
        problemas = []
        recomendacoes = []
        
        # COMENT√ÅRIO: A margem de aprova√ß√£o foi alterada para 80% da meta.
        tamanho_aceitavel = self.criterios_validacao['tamanho_minimo'] * 0.80
        if analise['tamanho'] < tamanho_aceitavel:
            problema = {
                'tipo': 'tamanho_insuficiente',
                'descricao': f"Documento com {analise['tamanho']} caracteres (meta de 80%: {int(tamanho_aceitavel)})"
            }
            problemas.append(problema)
            recomendacoes.append("O documento est√° muito curto. Por favor, expanda todas as se√ß√µes, adicionando mais detalhes, aprofundamento jur√≠dico e exemplos pr√°ticos para enriquecer o conte√∫do.")
            
        # Outras valida√ß√µes podem ser adicionadas aqui.
        
        return problemas, recomendacoes

    def _calcular_score_qualidade(self, documento: str) -> float:
        """Calcula um score de qualidade com base no tamanho."""
        score = 0.0
        tamanho = len(documento)
        meta = self.criterios_validacao['tamanho_minimo']
        
        if meta == 0: return 100.0 # Evita divis√£o por zero
        
        # O score √© proporcional ao tamanho, at√© atingir 100% na meta.
        score = (tamanho / meta) * 100.0
            
        return min(100.0, round(score, 2))
